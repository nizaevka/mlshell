memory,steps,verbose,pass_custom,select_rows,process_parallel,select_columns,reduce_dimension,estimate,pass_custom__accept_sparse,pass_custom__check_inverse,pass_custom__func,pass_custom__inv_kw_args,pass_custom__inverse_func,pass_custom__kw_args,pass_custom__validate,select_rows__accept_sparse,select_rows__check_inverse,select_rows__func,select_rows__inv_kw_args,select_rows__inverse_func,select_rows__kw_args,select_rows__validate,process_parallel__n_jobs,process_parallel__transformer_list,process_parallel__transformer_weights,process_parallel__verbose,process_parallel__pipeline_categoric,process_parallel__pipeline_numeric,process_parallel__pipeline_categoric__memory,process_parallel__pipeline_categoric__steps,process_parallel__pipeline_categoric__verbose,process_parallel__pipeline_categoric__select_columns,process_parallel__pipeline_categoric__encode_onehot,process_parallel__pipeline_categoric__select_columns__accept_sparse,process_parallel__pipeline_categoric__select_columns__check_inverse,process_parallel__pipeline_categoric__select_columns__func,process_parallel__pipeline_categoric__select_columns__inv_kw_args,process_parallel__pipeline_categoric__select_columns__inverse_func,process_parallel__pipeline_categoric__select_columns__kw_args,process_parallel__pipeline_categoric__select_columns__validate,process_parallel__pipeline_categoric__encode_onehot__categories,process_parallel__pipeline_categoric__encode_onehot__drop,process_parallel__pipeline_categoric__encode_onehot__dtype,process_parallel__pipeline_categoric__encode_onehot__handle_unknown,process_parallel__pipeline_categoric__encode_onehot__skip,process_parallel__pipeline_categoric__encode_onehot__sparse,process_parallel__pipeline_numeric__memory,process_parallel__pipeline_numeric__steps,process_parallel__pipeline_numeric__verbose,process_parallel__pipeline_numeric__select_columns,process_parallel__pipeline_numeric__impute,process_parallel__pipeline_numeric__transform_normal,process_parallel__pipeline_numeric__scale_row_wise,process_parallel__pipeline_numeric__scale_column_wise,process_parallel__pipeline_numeric__add_polynomial,process_parallel__pipeline_numeric__compose_columns,process_parallel__pipeline_numeric__select_columns__accept_sparse,process_parallel__pipeline_numeric__select_columns__check_inverse,process_parallel__pipeline_numeric__select_columns__func,process_parallel__pipeline_numeric__select_columns__inv_kw_args,process_parallel__pipeline_numeric__select_columns__inverse_func,process_parallel__pipeline_numeric__select_columns__kw_args,process_parallel__pipeline_numeric__select_columns__validate,process_parallel__pipeline_numeric__impute__n_jobs,process_parallel__pipeline_numeric__impute__transformer_list,process_parallel__pipeline_numeric__impute__transformer_weights,process_parallel__pipeline_numeric__impute__verbose,process_parallel__pipeline_numeric__impute__indicators,process_parallel__pipeline_numeric__impute__gaps,process_parallel__pipeline_numeric__impute__indicators__error_on_new,process_parallel__pipeline_numeric__impute__indicators__features,process_parallel__pipeline_numeric__impute__indicators__missing_values,process_parallel__pipeline_numeric__impute__indicators__sparse,process_parallel__pipeline_numeric__impute__gaps__add_indicator,process_parallel__pipeline_numeric__impute__gaps__copy,process_parallel__pipeline_numeric__impute__gaps__fill_value,process_parallel__pipeline_numeric__impute__gaps__missing_values,process_parallel__pipeline_numeric__impute__gaps__strategy,process_parallel__pipeline_numeric__impute__gaps__verbose,process_parallel__pipeline_numeric__transform_normal__copy,process_parallel__pipeline_numeric__transform_normal__method,process_parallel__pipeline_numeric__transform_normal__skip,process_parallel__pipeline_numeric__transform_normal__standardize,process_parallel__pipeline_numeric__scale_row_wise__accept_sparse,process_parallel__pipeline_numeric__scale_row_wise__check_inverse,process_parallel__pipeline_numeric__scale_row_wise__func,process_parallel__pipeline_numeric__scale_row_wise__inv_kw_args,process_parallel__pipeline_numeric__scale_row_wise__inverse_func,process_parallel__pipeline_numeric__scale_row_wise__kw_args,process_parallel__pipeline_numeric__scale_row_wise__validate,process_parallel__pipeline_numeric__scale_column_wise__copy,process_parallel__pipeline_numeric__scale_column_wise__quantile_range,process_parallel__pipeline_numeric__scale_column_wise__with_centering,process_parallel__pipeline_numeric__scale_column_wise__with_scaling,process_parallel__pipeline_numeric__add_polynomial__degree,process_parallel__pipeline_numeric__add_polynomial__include_bias,process_parallel__pipeline_numeric__add_polynomial__interaction_only,process_parallel__pipeline_numeric__add_polynomial__order,process_parallel__pipeline_numeric__compose_columns__n_jobs,process_parallel__pipeline_numeric__compose_columns__remainder,process_parallel__pipeline_numeric__compose_columns__sparse_threshold,process_parallel__pipeline_numeric__compose_columns__transformer_weights,process_parallel__pipeline_numeric__compose_columns__transformers,process_parallel__pipeline_numeric__compose_columns__verbose,process_parallel__pipeline_numeric__compose_columns__discretize,process_parallel__pipeline_numeric__compose_columns__discretize__encode,process_parallel__pipeline_numeric__compose_columns__discretize__n_bins,process_parallel__pipeline_numeric__compose_columns__discretize__strategy,select_columns__estimator__estimator_type,select_columns__estimator__skip,select_columns__estimator__verbose,select_columns__estimator,select_columns__max_features,select_columns__norm_order,select_columns__prefit,select_columns__threshold,reduce_dimension__skip,estimate__check_inverse,estimate__func,estimate__inverse_func,estimate__regressor__boosting_type,estimate__regressor__class_weight,estimate__regressor__colsample_bytree,estimate__regressor__importance_type,estimate__regressor__learning_rate,estimate__regressor__max_depth,estimate__regressor__min_child_samples,estimate__regressor__min_child_weight,estimate__regressor__min_split_gain,estimate__regressor__n_estimators,estimate__regressor__n_jobs,estimate__regressor__num_leaves,estimate__regressor__objective,estimate__regressor__random_state,estimate__regressor__reg_alpha,estimate__regressor__reg_lambda,estimate__regressor__silent,estimate__regressor__subsample,estimate__regressor__subsample_for_bin,estimate__regressor__subsample_freq,estimate__regressor__min_data_in_leaf,estimate__regressor,estimate__transformer,estimate__transformer__accept_sparse,estimate__transformer__check_inverse,estimate__transformer__func,estimate__transformer__inv_kw_args,estimate__transformer__inverse_func,estimate__transformer__kw_args,estimate__transformer__validate,mean_fit_time,std_fit_time,mean_score_time,std_score_time,params,split0_test_score,split1_test_score,split2_test_score,mean_test_score,std_test_score,rank_test_score,split0_train_score,split1_train_score,split2_train_score,mean_train_score,std_train_score,split0_test_r2,split1_test_r2,split2_test_r2,mean_test_r2,std_test_r2,rank_test_r2,split0_train_r2,split1_train_r2,split2_train_r2,mean_train_r2,std_train_r2,id,data_hash,estimator_type,estimator_name,cv_splitter,split_train_size,rows_limit,params_hash
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': {0: ('fea...
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelectorEstimator(estimator_type=None,
                                                  skip=True, verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', decomposition_CustomReducer(skip=True)), ('estimate', TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=None,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False)))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': {0: ('fea...
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelectorEstimator(estimator_type=None,
                                                  skip=True, verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",decomposition_CustomReducer(skip=True),"TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=None,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False))",False,True,<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,None,None,None,False,False,True,<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,None,None,None,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {0: ('feature_categor_0__cat1',
                                                              array(['A', 'B'], dtype=object)),
                                                          1: ('feature_...
                                     validate=False)),
                ('encode_onehot',
                 preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1], ...],
                                             drop=None,
                                             dtype=<class 'numpy.float64'>,
                                             handle_unknown='ignore',
                                             skip=False, sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {116: ('feature_116__cont1',),
                                                          117: ('feature_117__cont2',),
                                                          118: ('feature_11...
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {0: ('feature_categor_0__cat1',
                                                              array(['A', 'B'], dtype=object)),
                                                          1: ('feature_...
                                     validate=False)),
                ('encode_onehot',
                 preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1], ...],
                                             drop=None,
                                             dtype=<class 'numpy.float64'>,
                                             handle_unknown='ignore',
                                             skip=False, sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {116: ('feature_116__cont1',),
                                                          117: ('feature_117__cont2',),
                                                          118: ('feature_11...
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {0: ('feature_categor_0__cat1',
                                             array(['A', 'B'], dtype=object)),
                                         1: ('feature_categor_1__cat2',
                                             array(['A', 'B'], dtype=object)...
                                              array(['A', 'B'], dtype=object)),
                                         25: ('feature_categor_25__cat26',
                                              array(['A', 'B'], dtype=object)),
                                         26: ('feature_categor_26__cat27',
                                              array(['A', 'B'], dtype=object)),
                                         27: ('feature_categor_27__cat28',
                                              array(['A', 'B'], dtype=object)),
                                         28: ('feature_categor_28__cat29',
                                              array(['A', 'B'], dtype=object)),
                                         29: ('feature_categor_29__cat30',
                                              array(['A', 'B'], dtype=object)), ...}},
                    validate=False)), ('encode_onehot', preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], ...],
                            drop=None, dtype=<class 'numpy.float64'>,
                            handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {0: ('feature_categor_0__cat1',
                                             array(['A', 'B'], dtype=object)),
                                         1: ('feature_categor_1__cat2',
                                             array(['A', 'B'], dtype=object)...
                                              array(['A', 'B'], dtype=object)),
                                         25: ('feature_categor_25__cat26',
                                              array(['A', 'B'], dtype=object)),
                                         26: ('feature_categor_26__cat27',
                                              array(['A', 'B'], dtype=object)),
                                         27: ('feature_categor_27__cat28',
                                              array(['A', 'B'], dtype=object)),
                                         28: ('feature_categor_28__cat29',
                                              array(['A', 'B'], dtype=object)),
                                         29: ('feature_categor_29__cat30',
                                              array(['A', 'B'], dtype=object)), ...}},
                    validate=False)","preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], ...],
                            drop=None, dtype=<class 'numpy.float64'>,
                            handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,None,None,"{'indices': {0: ('feature_categor_0__cat1', array(['A', 'B'], dtype=object)), 1: ('feature_categor_1__cat2', array(['A', 'B'], dtype=object)), 2: ('feature_categor_2__cat3', array(['A', 'B'], dtype=object)), 3: ('feature_categor_3__cat4', array(['A', 'B'], dtype=object)), 4: ('feature_categor_4__cat5', array(['A', 'B'], dtype=object)), 5: ('feature_categor_5__cat6', array(['A', 'B'], dtype=object)), 6: ('feature_categor_6__cat7', array(['A', 'B'], dtype=object)), 7: ('feature_categor_7__cat8', array(['A', 'B'], dtype=object)), 8: ('feature_categor_8__cat9', array(['A', 'B'], dtype=object)), 9: ('feature_categor_9__cat10', array(['A', 'B'], dtype=object)), 10: ('feature_categor_10__cat11', array(['A', 'B'], dtype=object)), 11: ('feature_categor_11__cat12', array(['A', 'B'], dtype=object)), 12: ('feature_categor_12__cat13', array(['A', 'B'], dtype=object)), 13: ('feature_categor_13__cat14', array(['A', 'B'], dtype=object)), 14: ('feature_categor_14__cat15', array(['A'], dtype=object)), 15: ('feature_categor_15__cat16', array(['A', 'B'], dtype=object)), 16: ('feature_categor_16__cat17', array(['A', 'B'], dtype=object)), 17: ('feature_categor_17__cat18', array(['A', 'B'], dtype=object)), 18: ('feature_categor_18__cat19', array(['A', 'B'], dtype=object)), 19: ('feature_categor_19__cat20', array(['A', 'B'], dtype=object)), 20: ('feature_categor_20__cat21', array(['A', 'B'], dtype=object)), 21: ('feature_categor_21__cat22', array(['A'], dtype=object)), 22: ('feature_categor_22__cat23', array(['A', 'B'], dtype=object)), 23: ('feature_categor_23__cat24', array(['A', 'B'], dtype=object)), 24: ('feature_categor_24__cat25', array(['A', 'B'], dtype=object)), 25: ('feature_categor_25__cat26', array(['A', 'B'], dtype=object)), 26: ('feature_categor_26__cat27', array(['A', 'B'], dtype=object)), 27: ('feature_categor_27__cat28', array(['A', 'B'], dtype=object)), 28: ('feature_categor_28__cat29', array(['A', 'B'], dtype=object)), 29: ('feature_categor_29__cat30', array(['A', 'B'], dtype=object)), 30: ('feature_categor_30__cat31', array(['A', 'B'], dtype=object)), 31: ('feature_categor_31__cat32', array(['A', 'B'], dtype=object)), 32: ('feature_categor_32__cat33', array(['A', 'B'], dtype=object)), 33: ('feature_categor_33__cat34', array(['A', 'B'], dtype=object)), 34: ('feature_categor_34__cat35', array(['A', 'B'], dtype=object)), 35: ('feature_categor_35__cat36', array(['A', 'B'], dtype=object)), 36: ('feature_categor_36__cat37', array(['A', 'B'], dtype=object)), 37: ('feature_categor_37__cat38', array(['A', 'B'], dtype=object)), 38: ('feature_categor_38__cat39', array(['A', 'B'], dtype=object)), 39: ('feature_categor_39__cat40', array(['A', 'B'], dtype=object)), 40: ('feature_categor_40__cat41', array(['A', 'B'], dtype=object)), 41: ('feature_categor_41__cat42', array(['A', 'B'], dtype=object)), 42: ('feature_categor_42__cat43', array(['A', 'B'], dtype=object)), 43: ('feature_categor_43__cat44', array(['A', 'B'], dtype=object)), 44: ('feature_categor_44__cat45', array(['A', 'B'], dtype=object)), 45: ('feature_categor_45__cat46', array(['A', 'B'], dtype=object)), 46: ('feature_categor_46__cat47', array(['A', 'B'], dtype=object)), 47: ('feature_categor_47__cat48', array(['A', 'B'], dtype=object)), 48: ('feature_categor_48__cat49', array(['A', 'B'], dtype=object)), 49: ('feature_categor_49__cat50', array(['A', 'B'], dtype=object)), 50: ('feature_categor_50__cat51', array(['A', 'B'], dtype=object)), 51: ('feature_categor_51__cat52', array(['A', 'B'], dtype=object)), 52: ('feature_categor_52__cat53', array(['A', 'B'], dtype=object)), 53: ('feature_categor_53__cat54', array(['A', 'B'], dtype=object)), 54: ('feature_categor_54__cat55', array(['A'], dtype=object)), 55: ('feature_categor_55__cat56', array(['A'], dtype=object)), 56: ('feature_categor_56__cat57', array(['A', 'B'], dtype=object)), 57: ('feature_categor_57__cat58', array(['A'], dtype=object)), 58: ('feature_categor_58__cat59', array(['A', 'B'], dtype=object)), 59: ('feature_categor_59__cat60', array(['A', 'B'], dtype=object)), 60: ('feature_categor_60__cat61', array(['A', 'B'], dtype=object)), 61: ('feature_categor_61__cat62', array(['A'], dtype=object)), 62: ('feature_categor_62__cat63', array(['A'], dtype=object)), 63: ('feature_categor_63__cat64', array(['A'], dtype=object)), 64: ('feature_categor_64__cat65', array(['A', 'B'], dtype=object)), 65: ('feature_categor_65__cat66', array(['A', 'B'], dtype=object)), 66: ('feature_categor_66__cat67', array(['A', 'B'], dtype=object)), 67: ('feature_categor_67__cat68', array(['A'], dtype=object)), 68: ('feature_categor_68__cat69', array(['A', 'B'], dtype=object)), 69: ('feature_categor_69__cat70', array(['A'], dtype=object)), 70: ('feature_categor_70__cat71', array(['A', 'B'], dtype=object)), 71: ('feature_categor_71__cat72', array(['A', 'B'], dtype=object)), 72: ('feature_categor_72__cat73', array(['A', 'B'], dtype=object)), 73: ('feature_categor_73__cat74', array(['A', 'B'], dtype=object)), 74: ('feature_categor_74__cat75', array(['A', 'B'], dtype=object)), 75: ('feature_categor_75__cat76', array(['A', 'B', 'C'], dtype=object)), 76: ('feature_categor_76__cat77', array(['B', 'C', 'D'], dtype=object)), 77: ('feature_categor_77__cat78', array(['A', 'B', 'C', 'D'], dtype=object)), 78: ('feature_categor_78__cat79', array(['A', 'B', 'C', 'D'], dtype=object)), 79: ('feature_categor_79__cat80', array(['A', 'B', 'C', 'D'], dtype=object)), 80: ('feature_categor_80__cat81', array(['A', 'B', 'C', 'D'], dtype=object)), 81: ('feature_categor_81__cat82', array(['A', 'B', 'C', 'D'], dtype=object)), 82: ('feature_categor_82__cat83', array(['A', 'B', 'C', 'D'], dtype=object)), 83: ('feature_categor_83__cat84', array(['A', 'B', 'C', 'D'], dtype=object)), 84: ('feature_categor_84__cat85', array(['A', 'B', 'C'], dtype=object)), 85: ('feature_categor_85__cat86', array(['A', 'B', 'C', 'D'], dtype=object)), 86: ('feature_categor_86__cat87', array(['A', 'B', 'C', 'D'], dtype=object)), 87: ('feature_categor_87__cat88', array(['A', 'D'], dtype=object)), 88: ('feature_categor_88__cat89', array(['A', 'B', 'C'], dtype=object)), 89: ('feature_categor_89__cat90', array(['A', 'B', 'C'], dtype=object)), 90: ('feature_categor_90__cat91', array(['A', 'B', 'C', 'D', 'E', 'G'], dtype=object)), 91: ('feature_categor_91__cat92', array(['A', 'B', 'C', 'D', 'H'], dtype=object)), 92: ('feature_categor_92__cat93', array(['A', 'B', 'C', 'D', 'E'], dtype=object)), 93: ('feature_categor_93__cat94', array(['A', 'B', 'C', 'D', 'F'], dtype=object)), 94: ('feature_categor_94__cat95', array(['A', 'C', 'D', 'E'], dtype=object)), 95: ('feature_categor_95__cat96', array(['B', 'D', 'E', 'F', 'G'], dtype=object)), 96: ('feature_categor_96__cat97', array(['A', 'C', 'D', 'E', 'F', 'G'], dtype=object)), 97: ('feature_categor_97__cat98', array(['A', 'B', 'C', 'D', 'E'], dtype=object)), 98: ('feature_categor_98__cat99', array(['C', 'D', 'E', 'F', 'J', 'K', 'N', 'P', 'R', 'S', 'T'],
      dtype=object)), 99: ('feature_categor_99__cat100', array(['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
       'O'], dtype=object)), 100: ('feature_categor_100__cat101', array(['A', 'C', 'D', 'F', 'G', 'I', 'J', 'L', 'M', 'O', 'Q', 'R'],
      dtype=object)), 101: ('feature_categor_101__cat102', array(['A', 'B', 'C', 'D', 'E', 'G'], dtype=object)), 102: ('feature_categor_102__cat103', array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], dtype=object)), 103: ('feature_categor_103__cat104', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
       'P'], dtype=object)), 104: ('feature_categor_104__cat105', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M'], dtype=object)), 105: ('feature_categor_105__cat106', array(['D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M'], dtype=object)), 106: ('feature_categor_106__cat107', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'],
      dtype=object)), 107: ('feature_categor_107__cat108', array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
      dtype=object)), 108: ('feature_categor_108__cat109', array(['AB', 'AL', 'AR', 'AS', 'AT', 'BI', 'BJ', 'BL', 'BO', 'BQ', 'BU',
       'CD', 'CL', 'F', 'G', 'H', 'K', 'L', 'M', 'N', 'R', 'S', 'X'],
      dtype=object)), 109: ('feature_categor_109__cat110', array(['A', 'AC', 'AD', 'AI', 'AK', 'AM', 'AX', 'AY', 'BC', 'BG', 'BP',
       'BS', 'BT', 'C', 'CF', 'CH', 'CI', 'CJ', 'CL', 'CM', 'CO', 'CQ',
       'CR', 'CS', 'DA', 'DC', 'DH', 'DK', 'DL', 'DM', 'DT', 'DW', 'DX',
       'EA', 'EB', 'EE', 'EF', 'EG', 'EL', 'EM', 'N', 'T', 'U', 'V', 'W',
       'X'], dtype=object)), 110: ('feature_categor_110__cat111', array(['A', 'C', 'E', 'G', 'I', 'K', 'M', 'O', 'S', 'W'], dtype=object)), 111: ('feature_categor_111__cat112', array(['A', 'AA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AK', 'AL',
       'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW',
       'AX', 'AY', 'B', 'BA', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
       'Y'], dtype=object)), 112: ('feature_categor_112__cat113', array(['A', 'AD', 'AE', 'AF', 'AG', 'AI', 'AJ', 'AK', 'AM', 'AN', 'AO',
       'AQ', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'BC', 'BD', 'BF',
       'BG', 'BH', 'BJ', 'BK', 'BM', 'BN', 'BO', 'C', 'F', 'H', 'I', 'J',
       'K', 'L', 'M', 'N', 'Q', 'S', 'X', 'Y'], dtype=object)), 113: ('feature_categor_113__cat114', array(['A', 'C', 'E', 'F', 'I', 'J', 'L', 'N', 'O', 'R', 'U'],
      dtype=object)), 114: ('feature_categor_114__cat115', array(['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'],
      dtype=object)), 115: ('feature_categor_115__cat116', array(['AC', 'BA', 'BO', 'BP', 'BX', 'BY', 'CB', 'CD', 'CF', 'CG', 'CI',
       'CK', 'CO', 'CP', 'CR', 'CS', 'CT', 'CU', 'CW', 'CY', 'DA', 'DC',
       'DD', 'DF', 'DH', 'DI', 'DJ', 'DK', 'DM', 'DN', 'DP', 'DS', 'E',
       'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'EI', 'EK', 'EL', 'EN', 'EO',
       'EP', 'ES', 'EY', 'FB', 'FC', 'FD', 'FG', 'FH', 'FR', 'FT', 'FX',
       'GB', 'GC', 'GE', 'GI', 'GK', 'GL', 'GM', 'GN', 'GS', 'GU', 'GX',
       'H', 'HA', 'HB', 'HC', 'HG', 'HI', 'HJ', 'HK', 'HL', 'HM', 'HN',
       'HP', 'HQ', 'HV', 'HX', 'IC', 'IE', 'IF', 'IG', 'IH', 'II', 'IL',
       'IQ', 'IT', 'IU', 'JL', 'JR', 'JU', 'JW', 'JX', 'K', 'KA', 'KB',
       'KC', 'KD', 'KE', 'KI', 'KL', 'KN', 'KP', 'KQ', 'KR', 'KW', 'LB',
       'LC', 'LE', 'LF', 'LH', 'LJ', 'LL', 'LM', 'LN', 'LO', 'LQ', 'LV',
       'LW', 'LX', 'LY', 'MC', 'MD', 'ME', 'MG', 'MJ', 'MP'], dtype=object))}}",Falseone,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {116: ('feature_116__cont1',),
                                         117: ('feature_117__cont2',),
                                         118: ('feature_118__cont3',),
                                         119: ('feature_119__cont4',),
                                         120: ('feature_120__cont5',),
                                         121: ('feature_121__cont6',),
                                         122: ('feature_122__cont7',),
                                         123: ('feature_123__cont8',),
                                         124: ('feature_124__cont9',),
                                         125: ('feature_125__cont10',),
                                         126: ('feature_126__cont11',),
                                         127: ('feature_127__cont12',),
                                         128: ('feature_128__cont13',),
                                         129: ('feature_129__cont14',)}},
                    validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=True,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', preprocessing_SkippablePowerTransformer(copy=False, method='yeo-johnson',
                                        skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {116: ('feature_116__cont1',),
                                         117: ('feature_117__cont2',),
                                         118: ('feature_118__cont3',),
                                         119: ('feature_119__cont4',),
                                         120: ('feature_120__cont5',),
                                         121: ('feature_121__cont6',),
                                         122: ('feature_122__cont7',),
                                         123: ('feature_123__cont8',),
                                         124: ('feature_124__cont9',),
                                         125: ('feature_125__cont10',),
                                         126: ('feature_126__cont11',),
                                         127: ('feature_127__cont12',),
                                         128: ('feature_128__cont13',),
                                         129: ('feature_129__cont14',)}},
                    validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=True,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","preprocessing_SkippablePowerTransformer(copy=False, method='yeo-johnson',
                                        skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                  verbose=False)",False,True,<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,None,None,"{'indices': {116: ('feature_116__cont1',), 117: ('feature_117__cont2',), 118: ('feature_118__cont3',), 119: ('feature_119__cont4',), 120: ('feature_120__cont5',), 121: ('feature_121__cont6',), 122: ('feature_122__cont7',), 123: ('feature_123__cont8',), 124: ('feature_124__cont9',), 125: ('feature_125__cont10',), 126: ('feature_126__cont11',), 127: ('feature_127__cont12',), 128: ('feature_128__cont13',), 129: ('feature_129__cont14',)}}",False,None,"[('indicators', MissingIndicator(error_on_new=True, features='missing-only', missing_values=nan,
                 sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=True, features='missing-only', missing_values=nan,
                 sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",True,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,False,False,"(0, 100)",True,True,3,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,None,True,False,"CustomSelectorEstimator(estimator_type=None, skip=True, verbose=False)",None,1,False,None,True,True,None,None,gbdt,None,1.0,split,0.1,-1,20,0.001,0.0,250,-1,2,None,None,0.0,0.0,False,1.0,200000,0,1,"LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_data_in_leaf=1,
              min_split_gain=0.0, n_estimators=250, n_jobs=-1, num_leaves=2,
              objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,
              silent=False, subsample=1.0, subsample_for_bin=200000,
              subsample_freq=0)",None,nan,nan,nan,,nan,,nan,0.6538252035776774,0.34233664105612827,0.05730032920837402,0.0020534567721709604,"{'process_parallel__pipeline_numeric__add_polynomial__degree': 3, 'estimate__transformer': None}",-1623.4878409892513,-1748.9701663969902,-1555.681098100829,-1642.713035162357,80.07235082076174,2,-1161.7698242929412,-1076.7806403795755,-1133.8644668369977,-1124.1383105031716,35.37173008055533,0.305027566268795,0.21655206152891615,0.31410570436136775,0.2785617773863596,0.044003839176050795,1,0.6925737921579898,0.7228290585975192,0.705155161642111,0.7068526707992066,0.012409846623697578,8312f417-55e4-4109-b2c5-20ee77b09853,-8105398847923889655,regressor,LGBMRegressor,"KFold(n_splits=3, random_state=None, shuffle=True)",0.7,"(1000, False)",67fae6db4196030a7182cf8129efa522
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': {0: ('fea...
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelectorEstimator(estimator_type=None,
                                                  skip=True, verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', decomposition_CustomReducer(skip=True)), ('estimate', TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=None,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False)))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': {0: ('fea...
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelectorEstimator(estimator_type=None,
                                                  skip=True, verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",decomposition_CustomReducer(skip=True),"TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=None,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False))",False,True,<bound method Workflow.set_custom_param of <mlshell.general.Workflow object at 0x000001E9BFB6F1D0>>,None,None,None,False,False,True,<bound method CreateDefaultPipeline.subrows of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C417D160>>,None,None,None,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {0: ('feature_categor_0__cat1',
                                                              array(['A', 'B'], dtype=object)),
                                                          1: ('feature_...
                                     validate=False)),
                ('encode_onehot',
                 preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1], ...],
                                             drop=None,
                                             dtype=<class 'numpy.float64'>,
                                             handle_unknown='ignore',
                                             skip=False, sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {116: ('feature_116__cont1',),
                                                          117: ('feature_117__cont2',),
                                                          118: ('feature_11...
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {0: ('feature_categor_0__cat1',
                                                              array(['A', 'B'], dtype=object)),
                                                          1: ('feature_...
                                     validate=False)),
                ('encode_onehot',
                 preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1],
                                                         [0, 1], [0, 1], [0, 1], ...],
                                             drop=None,
                                             dtype=<class 'numpy.float64'>,
                                             handle_unknown='ignore',
                                             skip=False, sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': {116: ('feature_116__cont1',),
                                                          117: ('feature_117__cont2',),
                                                          118: ('feature_11...
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {0: ('feature_categor_0__cat1',
                                             array(['A', 'B'], dtype=object)),
                                         1: ('feature_categor_1__cat2',
                                             array(['A', 'B'], dtype=object)...
                                              array(['A', 'B'], dtype=object)),
                                         25: ('feature_categor_25__cat26',
                                              array(['A', 'B'], dtype=object)),
                                         26: ('feature_categor_26__cat27',
                                              array(['A', 'B'], dtype=object)),
                                         27: ('feature_categor_27__cat28',
                                              array(['A', 'B'], dtype=object)),
                                         28: ('feature_categor_28__cat29',
                                              array(['A', 'B'], dtype=object)),
                                         29: ('feature_categor_29__cat30',
                                              array(['A', 'B'], dtype=object)), ...}},
                    validate=False)), ('encode_onehot', preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], ...],
                            drop=None, dtype=<class 'numpy.float64'>,
                            handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {0: ('feature_categor_0__cat1',
                                             array(['A', 'B'], dtype=object)),
                                         1: ('feature_categor_1__cat2',
                                             array(['A', 'B'], dtype=object)...
                                              array(['A', 'B'], dtype=object)),
                                         25: ('feature_categor_25__cat26',
                                              array(['A', 'B'], dtype=object)),
                                         26: ('feature_categor_26__cat27',
                                              array(['A', 'B'], dtype=object)),
                                         27: ('feature_categor_27__cat28',
                                              array(['A', 'B'], dtype=object)),
                                         28: ('feature_categor_28__cat29',
                                              array(['A', 'B'], dtype=object)),
                                         29: ('feature_categor_29__cat30',
                                              array(['A', 'B'], dtype=object)), ...}},
                    validate=False)","preprocessing_OneHotEncoder(categories=[[0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0], [0, 1], [0, 1], [0, 1],
                                        [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], ...],
                            drop=None, dtype=<class 'numpy.float64'>,
                            handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C29BA208>>,None,None,"{'indices': {0: ('feature_categor_0__cat1', array(['A', 'B'], dtype=object)), 1: ('feature_categor_1__cat2', array(['A', 'B'], dtype=object)), 2: ('feature_categor_2__cat3', array(['A', 'B'], dtype=object)), 3: ('feature_categor_3__cat4', array(['A', 'B'], dtype=object)), 4: ('feature_categor_4__cat5', array(['A', 'B'], dtype=object)), 5: ('feature_categor_5__cat6', array(['A', 'B'], dtype=object)), 6: ('feature_categor_6__cat7', array(['A', 'B'], dtype=object)), 7: ('feature_categor_7__cat8', array(['A', 'B'], dtype=object)), 8: ('feature_categor_8__cat9', array(['A', 'B'], dtype=object)), 9: ('feature_categor_9__cat10', array(['A', 'B'], dtype=object)), 10: ('feature_categor_10__cat11', array(['A', 'B'], dtype=object)), 11: ('feature_categor_11__cat12', array(['A', 'B'], dtype=object)), 12: ('feature_categor_12__cat13', array(['A', 'B'], dtype=object)), 13: ('feature_categor_13__cat14', array(['A', 'B'], dtype=object)), 14: ('feature_categor_14__cat15', array(['A'], dtype=object)), 15: ('feature_categor_15__cat16', array(['A', 'B'], dtype=object)), 16: ('feature_categor_16__cat17', array(['A', 'B'], dtype=object)), 17: ('feature_categor_17__cat18', array(['A', 'B'], dtype=object)), 18: ('feature_categor_18__cat19', array(['A', 'B'], dtype=object)), 19: ('feature_categor_19__cat20', array(['A', 'B'], dtype=object)), 20: ('feature_categor_20__cat21', array(['A', 'B'], dtype=object)), 21: ('feature_categor_21__cat22', array(['A'], dtype=object)), 22: ('feature_categor_22__cat23', array(['A', 'B'], dtype=object)), 23: ('feature_categor_23__cat24', array(['A', 'B'], dtype=object)), 24: ('feature_categor_24__cat25', array(['A', 'B'], dtype=object)), 25: ('feature_categor_25__cat26', array(['A', 'B'], dtype=object)), 26: ('feature_categor_26__cat27', array(['A', 'B'], dtype=object)), 27: ('feature_categor_27__cat28', array(['A', 'B'], dtype=object)), 28: ('feature_categor_28__cat29', array(['A', 'B'], dtype=object)), 29: ('feature_categor_29__cat30', array(['A', 'B'], dtype=object)), 30: ('feature_categor_30__cat31', array(['A', 'B'], dtype=object)), 31: ('feature_categor_31__cat32', array(['A', 'B'], dtype=object)), 32: ('feature_categor_32__cat33', array(['A', 'B'], dtype=object)), 33: ('feature_categor_33__cat34', array(['A', 'B'], dtype=object)), 34: ('feature_categor_34__cat35', array(['A', 'B'], dtype=object)), 35: ('feature_categor_35__cat36', array(['A', 'B'], dtype=object)), 36: ('feature_categor_36__cat37', array(['A', 'B'], dtype=object)), 37: ('feature_categor_37__cat38', array(['A', 'B'], dtype=object)), 38: ('feature_categor_38__cat39', array(['A', 'B'], dtype=object)), 39: ('feature_categor_39__cat40', array(['A', 'B'], dtype=object)), 40: ('feature_categor_40__cat41', array(['A', 'B'], dtype=object)), 41: ('feature_categor_41__cat42', array(['A', 'B'], dtype=object)), 42: ('feature_categor_42__cat43', array(['A', 'B'], dtype=object)), 43: ('feature_categor_43__cat44', array(['A', 'B'], dtype=object)), 44: ('feature_categor_44__cat45', array(['A', 'B'], dtype=object)), 45: ('feature_categor_45__cat46', array(['A', 'B'], dtype=object)), 46: ('feature_categor_46__cat47', array(['A', 'B'], dtype=object)), 47: ('feature_categor_47__cat48', array(['A', 'B'], dtype=object)), 48: ('feature_categor_48__cat49', array(['A', 'B'], dtype=object)), 49: ('feature_categor_49__cat50', array(['A', 'B'], dtype=object)), 50: ('feature_categor_50__cat51', array(['A', 'B'], dtype=object)), 51: ('feature_categor_51__cat52', array(['A', 'B'], dtype=object)), 52: ('feature_categor_52__cat53', array(['A', 'B'], dtype=object)), 53: ('feature_categor_53__cat54', array(['A', 'B'], dtype=object)), 54: ('feature_categor_54__cat55', array(['A'], dtype=object)), 55: ('feature_categor_55__cat56', array(['A'], dtype=object)), 56: ('feature_categor_56__cat57', array(['A', 'B'], dtype=object)), 57: ('feature_categor_57__cat58', array(['A'], dtype=object)), 58: ('feature_categor_58__cat59', array(['A', 'B'], dtype=object)), 59: ('feature_categor_59__cat60', array(['A', 'B'], dtype=object)), 60: ('feature_categor_60__cat61', array(['A', 'B'], dtype=object)), 61: ('feature_categor_61__cat62', array(['A'], dtype=object)), 62: ('feature_categor_62__cat63', array(['A'], dtype=object)), 63: ('feature_categor_63__cat64', array(['A'], dtype=object)), 64: ('feature_categor_64__cat65', array(['A', 'B'], dtype=object)), 65: ('feature_categor_65__cat66', array(['A', 'B'], dtype=object)), 66: ('feature_categor_66__cat67', array(['A', 'B'], dtype=object)), 67: ('feature_categor_67__cat68', array(['A'], dtype=object)), 68: ('feature_categor_68__cat69', array(['A', 'B'], dtype=object)), 69: ('feature_categor_69__cat70', array(['A'], dtype=object)), 70: ('feature_categor_70__cat71', array(['A', 'B'], dtype=object)), 71: ('feature_categor_71__cat72', array(['A', 'B'], dtype=object)), 72: ('feature_categor_72__cat73', array(['A', 'B'], dtype=object)), 73: ('feature_categor_73__cat74', array(['A', 'B'], dtype=object)), 74: ('feature_categor_74__cat75', array(['A', 'B'], dtype=object)), 75: ('feature_categor_75__cat76', array(['A', 'B', 'C'], dtype=object)), 76: ('feature_categor_76__cat77', array(['B', 'C', 'D'], dtype=object)), 77: ('feature_categor_77__cat78', array(['A', 'B', 'C', 'D'], dtype=object)), 78: ('feature_categor_78__cat79', array(['A', 'B', 'C', 'D'], dtype=object)), 79: ('feature_categor_79__cat80', array(['A', 'B', 'C', 'D'], dtype=object)), 80: ('feature_categor_80__cat81', array(['A', 'B', 'C', 'D'], dtype=object)), 81: ('feature_categor_81__cat82', array(['A', 'B', 'C', 'D'], dtype=object)), 82: ('feature_categor_82__cat83', array(['A', 'B', 'C', 'D'], dtype=object)), 83: ('feature_categor_83__cat84', array(['A', 'B', 'C', 'D'], dtype=object)), 84: ('feature_categor_84__cat85', array(['A', 'B', 'C'], dtype=object)), 85: ('feature_categor_85__cat86', array(['A', 'B', 'C', 'D'], dtype=object)), 86: ('feature_categor_86__cat87', array(['A', 'B', 'C', 'D'], dtype=object)), 87: ('feature_categor_87__cat88', array(['A', 'D'], dtype=object)), 88: ('feature_categor_88__cat89', array(['A', 'B', 'C'], dtype=object)), 89: ('feature_categor_89__cat90', array(['A', 'B', 'C'], dtype=object)), 90: ('feature_categor_90__cat91', array(['A', 'B', 'C', 'D', 'E', 'G'], dtype=object)), 91: ('feature_categor_91__cat92', array(['A', 'B', 'C', 'D', 'H'], dtype=object)), 92: ('feature_categor_92__cat93', array(['A', 'B', 'C', 'D', 'E'], dtype=object)), 93: ('feature_categor_93__cat94', array(['A', 'B', 'C', 'D', 'F'], dtype=object)), 94: ('feature_categor_94__cat95', array(['A', 'C', 'D', 'E'], dtype=object)), 95: ('feature_categor_95__cat96', array(['B', 'D', 'E', 'F', 'G'], dtype=object)), 96: ('feature_categor_96__cat97', array(['A', 'C', 'D', 'E', 'F', 'G'], dtype=object)), 97: ('feature_categor_97__cat98', array(['A', 'B', 'C', 'D', 'E'], dtype=object)), 98: ('feature_categor_98__cat99', array(['C', 'D', 'E', 'F', 'J', 'K', 'N', 'P', 'R', 'S', 'T'],
      dtype=object)), 99: ('feature_categor_99__cat100', array(['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
       'O'], dtype=object)), 100: ('feature_categor_100__cat101', array(['A', 'C', 'D', 'F', 'G', 'I', 'J', 'L', 'M', 'O', 'Q', 'R'],
      dtype=object)), 101: ('feature_categor_101__cat102', array(['A', 'B', 'C', 'D', 'E', 'G'], dtype=object)), 102: ('feature_categor_102__cat103', array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], dtype=object)), 103: ('feature_categor_103__cat104', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
       'P'], dtype=object)), 104: ('feature_categor_104__cat105', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M'], dtype=object)), 105: ('feature_categor_105__cat106', array(['D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M'], dtype=object)), 106: ('feature_categor_106__cat107', array(['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'],
      dtype=object)), 107: ('feature_categor_107__cat108', array(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
      dtype=object)), 108: ('feature_categor_108__cat109', array(['AB', 'AL', 'AR', 'AS', 'AT', 'BI', 'BJ', 'BL', 'BO', 'BQ', 'BU',
       'CD', 'CL', 'F', 'G', 'H', 'K', 'L', 'M', 'N', 'R', 'S', 'X'],
      dtype=object)), 109: ('feature_categor_109__cat110', array(['A', 'AC', 'AD', 'AI', 'AK', 'AM', 'AX', 'AY', 'BC', 'BG', 'BP',
       'BS', 'BT', 'C', 'CF', 'CH', 'CI', 'CJ', 'CL', 'CM', 'CO', 'CQ',
       'CR', 'CS', 'DA', 'DC', 'DH', 'DK', 'DL', 'DM', 'DT', 'DW', 'DX',
       'EA', 'EB', 'EE', 'EF', 'EG', 'EL', 'EM', 'N', 'T', 'U', 'V', 'W',
       'X'], dtype=object)), 110: ('feature_categor_110__cat111', array(['A', 'C', 'E', 'G', 'I', 'K', 'M', 'O', 'S', 'W'], dtype=object)), 111: ('feature_categor_111__cat112', array(['A', 'AA', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AK', 'AL',
       'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW',
       'AX', 'AY', 'B', 'BA', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
       'Y'], dtype=object)), 112: ('feature_categor_112__cat113', array(['A', 'AD', 'AE', 'AF', 'AG', 'AI', 'AJ', 'AK', 'AM', 'AN', 'AO',
       'AQ', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'BC', 'BD', 'BF',
       'BG', 'BH', 'BJ', 'BK', 'BM', 'BN', 'BO', 'C', 'F', 'H', 'I', 'J',
       'K', 'L', 'M', 'N', 'Q', 'S', 'X', 'Y'], dtype=object)), 113: ('feature_categor_113__cat114', array(['A', 'C', 'E', 'F', 'I', 'J', 'L', 'N', 'O', 'R', 'U'],
      dtype=object)), 114: ('feature_categor_114__cat115', array(['F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R'],
      dtype=object)), 115: ('feature_categor_115__cat116', array(['AC', 'BA', 'BO', 'BP', 'BX', 'BY', 'CB', 'CD', 'CF', 'CG', 'CI',
       'CK', 'CO', 'CP', 'CR', 'CS', 'CT', 'CU', 'CW', 'CY', 'DA', 'DC',
       'DD', 'DF', 'DH', 'DI', 'DJ', 'DK', 'DM', 'DN', 'DP', 'DS', 'E',
       'EA', 'EB', 'EC', 'ED', 'EE', 'EF', 'EI', 'EK', 'EL', 'EN', 'EO',
       'EP', 'ES', 'EY', 'FB', 'FC', 'FD', 'FG', 'FH', 'FR', 'FT', 'FX',
       'GB', 'GC', 'GE', 'GI', 'GK', 'GL', 'GM', 'GN', 'GS', 'GU', 'GX',
       'H', 'HA', 'HB', 'HC', 'HG', 'HI', 'HJ', 'HK', 'HL', 'HM', 'HN',
       'HP', 'HQ', 'HV', 'HX', 'IC', 'IE', 'IF', 'IG', 'IH', 'II', 'IL',
       'IQ', 'IT', 'IU', 'JL', 'JR', 'JU', 'JW', 'JX', 'K', 'KA', 'KB',
       'KC', 'KD', 'KE', 'KI', 'KL', 'KN', 'KP', 'KQ', 'KR', 'KW', 'LB',
       'LC', 'LE', 'LF', 'LH', 'LJ', 'LL', 'LM', 'LN', 'LO', 'LQ', 'LV',
       'LW', 'LX', 'LY', 'MC', 'MD', 'ME', 'MG', 'MJ', 'MP'], dtype=object))}}",Falseone,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {116: ('feature_116__cont1',),
                                         117: ('feature_117__cont2',),
                                         118: ('feature_118__cont3',),
                                         119: ('feature_119__cont4',),
                                         120: ('feature_120__cont5',),
                                         121: ('feature_121__cont6',),
                                         122: ('feature_122__cont7',),
                                         123: ('feature_123__cont8',),
                                         124: ('feature_124__cont9',),
                                         125: ('feature_125__cont10',),
                                         126: ('feature_126__cont11',),
                                         127: ('feature_127__cont12',),
                                         128: ('feature_128__cont13',),
                                         129: ('feature_129__cont14',)}},
                    validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=True,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', preprocessing_SkippablePowerTransformer(copy=False, method='yeo-johnson',
                                        skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': {116: ('feature_116__cont1',),
                                         117: ('feature_117__cont2',),
                                         118: ('feature_118__cont3',),
                                         119: ('feature_119__cont4',),
                                         120: ('feature_120__cont5',),
                                         121: ('feature_121__cont6',),
                                         122: ('feature_122__cont7',),
                                         123: ('feature_123__cont8',),
                                         124: ('feature_124__cont9',),
                                         125: ('feature_125__cont10',),
                                         126: ('feature_126__cont11',),
                                         127: ('feature_127__cont12',),
                                         128: ('feature_128__cont13',),
                                         129: ('feature_129__cont14',)}},
                    validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=True,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","preprocessing_SkippablePowerTransformer(copy=False, method='yeo-johnson',
                                        skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)],
                  verbose=False)",False,True,<bound method CreateDefaultPipeline.subcolumns of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C11E2BE0>>,None,None,"{'indices': {116: ('feature_116__cont1',), 117: ('feature_117__cont2',), 118: ('feature_118__cont3',), 119: ('feature_119__cont4',), 120: ('feature_120__cont5',), 121: ('feature_121__cont6',), 122: ('feature_122__cont7',), 123: ('feature_123__cont8',), 124: ('feature_124__cont9',), 125: ('feature_125__cont10',), 126: ('feature_126__cont11',), 127: ('feature_127__cont12',), 128: ('feature_128__cont13',), 129: ('feature_129__cont14',)}}",False,None,"[('indicators', MissingIndicator(error_on_new=True, features='missing-only', missing_values=nan,
                 sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=True, features='missing-only', missing_values=nan,
                 sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",True,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,False,False,"(0, 100)",True,True,3,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method CreateDefaultPipeline.bining_mask of <mlshell.default.CreateDefaultPipeline object at 0x000001E9C0B86B70>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,None,True,False,"CustomSelectorEstimator(estimator_type=None, skip=True, verbose=False)",None,1,False,None,True,True,None,None,gbdt,None,1.0,split,0.1,-1,20,0.001,0.0,250,-1,2,None,None,0.0,0.0,False,1.0,200000,0,1,"LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_data_in_leaf=1,
              min_split_gain=0.0, n_estimators=250, n_jobs=-1, num_leaves=2,
              objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,
              silent=False, subsample=1.0, subsample_for_bin=200000,
              subsample_freq=0)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=<ufunc 'log'>,
                    inv_kw_args=None, inverse_func=<ufunc 'exp'>, kw_args=None,
                    validate=False)",False,True,<ufunc 'log'>,,<ufunc 'exp'>,,False,0.5047104358673096,0.1154244528281192,0.05696749687194824,0.0014129309528317826,"{'process_parallel__pipeline_numeric__add_polynomial__degree': 3, 'estimate__transformer': FunctionTransformer(accept_sparse=False, check_inverse=True, func=<ufunc 'log'>,
                    inv_kw_args=None, inverse_func=<ufunc 'exp'>, kw_args=None,
                    validate=False)}",-1443.776429406497,-1660.3516004659673,-1459.4085742957084,-1521.1788680560576,98.61669254674746,1,-1148.4316986979618,-1102.7425042319624,-1148.202446600505,-1133.1255498434764,21.484261442655395,0.31947935846952613,0.17336860668405152,0.29797099717691644,0.2636063207768314,0.06440903758992764,2,0.5336240294635359,0.5792391491907954,0.548053952221537,0.5536390436252895,0.019036451374915046,aae72314-c6bb-43c1-9814-ac708894abb5,-8105398847923889655,regressor,LGBMRegressor,"KFold(n_splits=3, random_state=None, shuffle=True)",0.7,"(1000, False)",67fae6db4196030a7182cf8129efa522
