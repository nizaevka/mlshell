memory,steps,verbose,pass_custom,select_rows,process_parallel,select_columns,reduce_dimension,estimate,pass_custom__accept_sparse,pass_custom__check_inverse,pass_custom__func,pass_custom__inv_kw_args,pass_custom__inverse_func,pass_custom__kw_args,pass_custom__skip,pass_custom__validate,select_rows__accept_sparse,select_rows__check_inverse,select_rows__func,select_rows__inv_kw_args,select_rows__inverse_func,select_rows__kw_args,select_rows__skip,select_rows__validate,process_parallel__n_jobs,process_parallel__transformer_list,process_parallel__transformer_weights,process_parallel__verbose,process_parallel__pipeline_categoric,process_parallel__pipeline_numeric,process_parallel__pipeline_categoric__memory,process_parallel__pipeline_categoric__steps,process_parallel__pipeline_categoric__verbose,process_parallel__pipeline_categoric__select_columns,process_parallel__pipeline_categoric__encode_onehot,process_parallel__pipeline_categoric__select_columns__accept_sparse,process_parallel__pipeline_categoric__select_columns__check_inverse,process_parallel__pipeline_categoric__select_columns__func,process_parallel__pipeline_categoric__select_columns__inv_kw_args,process_parallel__pipeline_categoric__select_columns__inverse_func,process_parallel__pipeline_categoric__select_columns__kw_args,process_parallel__pipeline_categoric__select_columns__skip,process_parallel__pipeline_categoric__select_columns__validate,process_parallel__pipeline_categoric__encode_onehot__categories,process_parallel__pipeline_categoric__encode_onehot__drop,process_parallel__pipeline_categoric__encode_onehot__dtype,process_parallel__pipeline_categoric__encode_onehot__handle_unknown,process_parallel__pipeline_categoric__encode_onehot__skip,process_parallel__pipeline_categoric__encode_onehot__sparse,process_parallel__pipeline_numeric__memory,process_parallel__pipeline_numeric__steps,process_parallel__pipeline_numeric__verbose,process_parallel__pipeline_numeric__select_columns,process_parallel__pipeline_numeric__impute,process_parallel__pipeline_numeric__transform_normal,process_parallel__pipeline_numeric__scale_row_wise,process_parallel__pipeline_numeric__scale_column_wise,process_parallel__pipeline_numeric__add_polynomial,process_parallel__pipeline_numeric__compose_columns,process_parallel__pipeline_numeric__select_columns__accept_sparse,process_parallel__pipeline_numeric__select_columns__check_inverse,process_parallel__pipeline_numeric__select_columns__func,process_parallel__pipeline_numeric__select_columns__inv_kw_args,process_parallel__pipeline_numeric__select_columns__inverse_func,process_parallel__pipeline_numeric__select_columns__kw_args,process_parallel__pipeline_numeric__select_columns__skip,process_parallel__pipeline_numeric__select_columns__validate,process_parallel__pipeline_numeric__impute__n_jobs,process_parallel__pipeline_numeric__impute__transformer_list,process_parallel__pipeline_numeric__impute__transformer_weights,process_parallel__pipeline_numeric__impute__verbose,process_parallel__pipeline_numeric__impute__indicators,process_parallel__pipeline_numeric__impute__gaps,process_parallel__pipeline_numeric__impute__indicators__error_on_new,process_parallel__pipeline_numeric__impute__indicators__features,process_parallel__pipeline_numeric__impute__indicators__missing_values,process_parallel__pipeline_numeric__impute__indicators__sparse,process_parallel__pipeline_numeric__impute__gaps__add_indicator,process_parallel__pipeline_numeric__impute__gaps__copy,process_parallel__pipeline_numeric__impute__gaps__fill_value,process_parallel__pipeline_numeric__impute__gaps__missing_values,process_parallel__pipeline_numeric__impute__gaps__strategy,process_parallel__pipeline_numeric__impute__gaps__verbose,process_parallel__pipeline_numeric__transform_normal__copy,process_parallel__pipeline_numeric__transform_normal__method,process_parallel__pipeline_numeric__transform_normal__skip,process_parallel__pipeline_numeric__transform_normal__standardize,process_parallel__pipeline_numeric__scale_row_wise__accept_sparse,process_parallel__pipeline_numeric__scale_row_wise__check_inverse,process_parallel__pipeline_numeric__scale_row_wise__func,process_parallel__pipeline_numeric__scale_row_wise__inv_kw_args,process_parallel__pipeline_numeric__scale_row_wise__inverse_func,process_parallel__pipeline_numeric__scale_row_wise__kw_args,process_parallel__pipeline_numeric__scale_row_wise__skip,process_parallel__pipeline_numeric__scale_row_wise__validate,process_parallel__pipeline_numeric__scale_column_wise__copy,process_parallel__pipeline_numeric__scale_column_wise__quantile_range,process_parallel__pipeline_numeric__scale_column_wise__with_centering,process_parallel__pipeline_numeric__scale_column_wise__with_scaling,process_parallel__pipeline_numeric__add_polynomial__degree,process_parallel__pipeline_numeric__add_polynomial__include_bias,process_parallel__pipeline_numeric__add_polynomial__interaction_only,process_parallel__pipeline_numeric__add_polynomial__order,process_parallel__pipeline_numeric__compose_columns__n_jobs,process_parallel__pipeline_numeric__compose_columns__remainder,process_parallel__pipeline_numeric__compose_columns__sparse_threshold,process_parallel__pipeline_numeric__compose_columns__transformer_weights,process_parallel__pipeline_numeric__compose_columns__transformers,process_parallel__pipeline_numeric__compose_columns__verbose,process_parallel__pipeline_numeric__compose_columns__discretize,process_parallel__pipeline_numeric__compose_columns__discretize__encode,process_parallel__pipeline_numeric__compose_columns__discretize__n_bins,process_parallel__pipeline_numeric__compose_columns__discretize__strategy,select_columns__estimator__estimator_type,select_columns__estimator__skip,select_columns__estimator__verbose,select_columns__estimator,select_columns__max_features,select_columns__norm_order,select_columns__prefit,select_columns__threshold,reduce_dimension__skip,estimate__memory,estimate__steps,estimate__verbose,estimate__predict_proba,estimate__apply_threshold,estimate__predict_proba__classifier__boosting_type,estimate__predict_proba__classifier__class_weight,estimate__predict_proba__classifier__colsample_bytree,estimate__predict_proba__classifier__importance_type,estimate__predict_proba__classifier__learning_rate,estimate__predict_proba__classifier__max_depth,estimate__predict_proba__classifier__min_child_samples,estimate__predict_proba__classifier__min_child_weight,estimate__predict_proba__classifier__min_split_gain,estimate__predict_proba__classifier__n_estimators,estimate__predict_proba__classifier__n_jobs,estimate__predict_proba__classifier__num_leaves,estimate__predict_proba__classifier__objective,estimate__predict_proba__classifier__random_state,estimate__predict_proba__classifier__reg_alpha,estimate__predict_proba__classifier__reg_lambda,estimate__predict_proba__classifier__silent,estimate__predict_proba__classifier__subsample,estimate__predict_proba__classifier__subsample_for_bin,estimate__predict_proba__classifier__subsample_freq,estimate__predict_proba__classifier,estimate__apply_threshold__params,estimate__apply_threshold__threshold,mean_fit_time,std_fit_time,mean_score_time,std_score_time,params,split0_test_metric__roc_auc,split1_test_metric__roc_auc,split2_test_metric__roc_auc,mean_test_metric__roc_auc,std_test_metric__roc_auc,rank_test_metric__roc_auc,split0_train_metric__roc_auc,split1_train_metric__roc_auc,split2_train_metric__roc_auc,mean_train_metric__roc_auc,std_train_metric__roc_auc,split0_test_metric__precision,split1_test_metric__precision,split2_test_metric__precision,mean_test_metric__precision,std_test_metric__precision,rank_test_metric__precision,split0_train_metric__precision,split1_train_metric__precision,split2_train_metric__precision,mean_train_metric__precision,std_train_metric__precision,split0_test_metric__custom,split1_test_metric__custom,split2_test_metric__custom,mean_test_metric__custom,std_test_metric__custom,rank_test_metric__custom,split0_train_metric__custom,split1_train_metric__custom,split2_train_metric__custom,mean_train_metric__custom,std_train_metric__custom,id,pipeline__id,pipeline__hash,pipeline__type,dataset__id,dataset__hash
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.009442745360632799,0.00022069613138834635,9.964895223453312e-06,0.0020580291748046875,0.00010257597437008963,{'estimate__apply_threshold__threshold': 0.009442745360632799},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,7,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,7,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,09ee580b-32b7-475c-b74a-270d317e8710,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.1621771704781827,0.00021227200826009115,1.5613939527184566e-06,0.0019463698069254558,2.4982303243495306e-05,{'estimate__apply_threshold__threshold': 0.1621771704781827},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,0ccf3907-89ab-4b39-8e97-b1c339577f3a,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.3975509701522514,0.00020837783813476562,0.0,0.0018909772237141926,2.784114745223041e-05,{'estimate__apply_threshold__threshold': 0.3975509701522514},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,5,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,5,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,8f48dc9d-a984-408b-8a82-560178206ab3,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.3975509701522514,0.00021044413248697916,7.867411722033552e-07,0.001926422119140625,1.2937732441923224e-05,{'estimate__apply_threshold__threshold': 0.3975509701522514},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,5,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,5,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,775949dd-b199-4e0f-935d-6fe251bb14e0,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5547393847647705,0.00021807352701822916,1.034735412518806e-05,0.0019049644470214844,1.7605346211923786e-05,{'estimate__apply_threshold__threshold': 0.5547393847647705},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,3,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,3,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,d7aef294-1cf6-4d5e-aa74-8357109c8e7e,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5669644124417274,0.0002102057139078776,4.899036091938795e-07,0.0019159317016601562,1.858135964240905e-05,{'estimate__apply_threshold__threshold': 0.5669644124417274},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,3,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,3,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,e701dace-fca2-4f18-a984-3ed37e650640,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.7332875774562987,0.00022212664286295572,1.3076606433022617e-05,0.0020072460174560547,9.61393665590738e-05,{'estimate__apply_threshold__threshold': 0.7332875774562987},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,2,0.0,0.5,1.0,0.5,0.408248290463863,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,2,0.0,0.5,1.0,0.5,0.408248290463863,eb9752e8-b21e-4eda-a544-44b619f6a1d0,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.8692101592014967,0.0002590020497639974,3.515378440374271e-05,0.0021266937255859375,0.00015269824349011072,{'estimate__apply_threshold__threshold': 0.8692101592014967},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,cc28d4f6-cce9-40f7-91c9-4b822729ab7f,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.9041226203629578,0.00023055076599121094,1.2626434259056653e-05,0.0021192232767740884,9.18462169785183e-05,{'estimate__apply_threshold__threshold': 0.9041226203629578},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,ac4a9952-bd42-48da-a727-48578542f3f5,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 1, 'param_b': 'c'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          4...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='classifier', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"Pipeline(memory=None,
         steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                                 class_weight=None,
                                                                 colsample_bytree=1.0,
                                                                 importance_type='split',
                                                                 learning_rate=0.1,
                                                                 max_depth=-1,
                                                                 min_child_samples=1,
                                                                 min_child_weight=0.001,
                                                                 min_split_gain=0.0,
                                                                 n_estimators=100,
                                                                 n_jobs=-1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 reg_alpha=0.0,
                                                                 reg_lambda=0.0,
                                                                 silent=False,
                                                                 subsample=1.0,
                                                                 subsample_for_bin=200000,
                                                                 subsample_freq=0))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))],
         verbose=False)",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e2a3950>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e41c6d0>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]},...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26cd90>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=1, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e26ce50>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7f999e24b9d0>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,classifier,True,False,"CustomSelector(estimator_type='classifier', skip=True, verbose=False)",None,1,False,None,True,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(boosting_type='gbdt',
                                                class_weight=None,
                                                colsample_bytree=1.0,
                                                importance_type='split',
                                                learning_rate=0.1, max_depth=-1,
                                                min_child_samples=1,
                                                min_child_weight=0.001,
                                                min_split_gain=0.0,
                                                n_estimators=100, n_jobs=-1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, reg_alpha=0.0,
                                                reg_lambda=0.0, silent=False,
                                                subsample=1.0,
                                                subsample_for_bin=200000,
                                                subsample_freq=0))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=1, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=2, objective='binary',
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, silent=False,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",1.0,0.00024207433064778647,7.645107354365181e-06,0.0020401477813720703,0.00011322163372530249,{'estimate__apply_threshold__threshold': 1.0},0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8,0.0,0.0,0.0,0.0,0.0,abeaf01c-9ad9-4aa9-b187-88a4b8a731df,pipeline__lgbm,-4134077059914805079,classifier,dataset__train,-2181844854438638947
