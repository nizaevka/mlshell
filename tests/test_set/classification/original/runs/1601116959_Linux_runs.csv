memory,steps,verbose,pass_custom,select_rows,process_parallel,select_columns,reduce_dimensions,estimate,pass_custom__accept_sparse,pass_custom__check_inverse,pass_custom__func,pass_custom__inv_kw_args,pass_custom__inverse_func,pass_custom__kw_args,pass_custom__skip,pass_custom__validate,select_rows__accept_sparse,select_rows__check_inverse,select_rows__func,select_rows__inv_kw_args,select_rows__inverse_func,select_rows__kw_args,select_rows__skip,select_rows__validate,process_parallel__n_jobs,process_parallel__transformer_list,process_parallel__transformer_weights,process_parallel__verbose,process_parallel__pipeline_categoric,process_parallel__pipeline_numeric,process_parallel__pipeline_categoric__memory,process_parallel__pipeline_categoric__steps,process_parallel__pipeline_categoric__verbose,process_parallel__pipeline_categoric__select_columns,process_parallel__pipeline_categoric__encode_onehot,process_parallel__pipeline_categoric__select_columns__accept_sparse,process_parallel__pipeline_categoric__select_columns__check_inverse,process_parallel__pipeline_categoric__select_columns__func,process_parallel__pipeline_categoric__select_columns__inv_kw_args,process_parallel__pipeline_categoric__select_columns__inverse_func,process_parallel__pipeline_categoric__select_columns__kw_args,process_parallel__pipeline_categoric__select_columns__skip,process_parallel__pipeline_categoric__select_columns__validate,process_parallel__pipeline_categoric__encode_onehot__categories,process_parallel__pipeline_categoric__encode_onehot__drop,process_parallel__pipeline_categoric__encode_onehot__dtype,process_parallel__pipeline_categoric__encode_onehot__handle_unknown,process_parallel__pipeline_categoric__encode_onehot__skip,process_parallel__pipeline_categoric__encode_onehot__sparse,process_parallel__pipeline_numeric__memory,process_parallel__pipeline_numeric__steps,process_parallel__pipeline_numeric__verbose,process_parallel__pipeline_numeric__select_columns,process_parallel__pipeline_numeric__impute,process_parallel__pipeline_numeric__transform_normal,process_parallel__pipeline_numeric__scale_row_wise,process_parallel__pipeline_numeric__scale_column_wise,process_parallel__pipeline_numeric__add_polynomial,process_parallel__pipeline_numeric__compose_columns,process_parallel__pipeline_numeric__select_columns__accept_sparse,process_parallel__pipeline_numeric__select_columns__check_inverse,process_parallel__pipeline_numeric__select_columns__func,process_parallel__pipeline_numeric__select_columns__inv_kw_args,process_parallel__pipeline_numeric__select_columns__inverse_func,process_parallel__pipeline_numeric__select_columns__kw_args,process_parallel__pipeline_numeric__select_columns__skip,process_parallel__pipeline_numeric__select_columns__validate,process_parallel__pipeline_numeric__impute__n_jobs,process_parallel__pipeline_numeric__impute__transformer_list,process_parallel__pipeline_numeric__impute__transformer_weights,process_parallel__pipeline_numeric__impute__verbose,process_parallel__pipeline_numeric__impute__indicators,process_parallel__pipeline_numeric__impute__gaps,process_parallel__pipeline_numeric__impute__indicators__error_on_new,process_parallel__pipeline_numeric__impute__indicators__features,process_parallel__pipeline_numeric__impute__indicators__missing_values,process_parallel__pipeline_numeric__impute__indicators__sparse,process_parallel__pipeline_numeric__impute__gaps__add_indicator,process_parallel__pipeline_numeric__impute__gaps__copy,process_parallel__pipeline_numeric__impute__gaps__fill_value,process_parallel__pipeline_numeric__impute__gaps__missing_values,process_parallel__pipeline_numeric__impute__gaps__strategy,process_parallel__pipeline_numeric__impute__gaps__verbose,process_parallel__pipeline_numeric__transform_normal__copy,process_parallel__pipeline_numeric__transform_normal__method,process_parallel__pipeline_numeric__transform_normal__skip,process_parallel__pipeline_numeric__transform_normal__standardize,process_parallel__pipeline_numeric__scale_row_wise__accept_sparse,process_parallel__pipeline_numeric__scale_row_wise__check_inverse,process_parallel__pipeline_numeric__scale_row_wise__func,process_parallel__pipeline_numeric__scale_row_wise__inv_kw_args,process_parallel__pipeline_numeric__scale_row_wise__inverse_func,process_parallel__pipeline_numeric__scale_row_wise__kw_args,process_parallel__pipeline_numeric__scale_row_wise__skip,process_parallel__pipeline_numeric__scale_row_wise__validate,process_parallel__pipeline_numeric__scale_column_wise__copy,process_parallel__pipeline_numeric__scale_column_wise__quantile_range,process_parallel__pipeline_numeric__scale_column_wise__with_centering,process_parallel__pipeline_numeric__scale_column_wise__with_scaling,process_parallel__pipeline_numeric__add_polynomial__degree,process_parallel__pipeline_numeric__add_polynomial__include_bias,process_parallel__pipeline_numeric__add_polynomial__interaction_only,process_parallel__pipeline_numeric__add_polynomial__order,process_parallel__pipeline_numeric__compose_columns__n_jobs,process_parallel__pipeline_numeric__compose_columns__remainder,process_parallel__pipeline_numeric__compose_columns__sparse_threshold,process_parallel__pipeline_numeric__compose_columns__transformer_weights,process_parallel__pipeline_numeric__compose_columns__transformers,process_parallel__pipeline_numeric__compose_columns__verbose,process_parallel__pipeline_numeric__compose_columns__discretize,process_parallel__pipeline_numeric__compose_columns__discretize__encode,process_parallel__pipeline_numeric__compose_columns__discretize__n_bins,process_parallel__pipeline_numeric__compose_columns__discretize__strategy,select_columns__estimator__estimator_type,select_columns__estimator__skip,select_columns__estimator__verbose,select_columns__estimator,select_columns__max_features,select_columns__norm_order,select_columns__prefit,select_columns__threshold,reduce_dimensions__copy,reduce_dimensions__iterated_power,reduce_dimensions__n_components,reduce_dimensions__random_state,reduce_dimensions__skip,reduce_dimensions__svd_solver,reduce_dimensions__tol,reduce_dimensions__whiten,estimate__memory,estimate__steps,estimate__verbose,estimate__predict_proba,estimate__apply_threshold,estimate__predict_proba__classifier__boosting_type,estimate__predict_proba__classifier__class_weight,estimate__predict_proba__classifier__colsample_bytree,estimate__predict_proba__classifier__importance_type,estimate__predict_proba__classifier__learning_rate,estimate__predict_proba__classifier__max_depth,estimate__predict_proba__classifier__min_child_samples,estimate__predict_proba__classifier__min_child_weight,estimate__predict_proba__classifier__min_split_gain,estimate__predict_proba__classifier__n_estimators,estimate__predict_proba__classifier__n_jobs,estimate__predict_proba__classifier__num_leaves,estimate__predict_proba__classifier__objective,estimate__predict_proba__classifier__random_state,estimate__predict_proba__classifier__reg_alpha,estimate__predict_proba__classifier__reg_lambda,estimate__predict_proba__classifier__silent,estimate__predict_proba__classifier__subsample,estimate__predict_proba__classifier__subsample_for_bin,estimate__predict_proba__classifier__subsample_freq,estimate__predict_proba__classifier,estimate__apply_threshold__params,estimate__apply_threshold__threshold,mean_fit_time,std_fit_time,mean_score_time,std_score_time,params,split0_test_metric__roc_auc,split1_test_metric__roc_auc,split2_test_metric__roc_auc,mean_test_metric__roc_auc,std_test_metric__roc_auc,rank_test_metric__roc_auc,split0_train_metric__roc_auc,split1_train_metric__roc_auc,split2_train_metric__roc_auc,mean_train_metric__roc_auc,std_train_metric__roc_auc,split0_test_metric__precision,split1_test_metric__precision,split2_test_metric__precision,mean_test_metric__precision,std_test_metric__precision,rank_test_metric__precision,split0_train_metric__precision,split1_train_metric__precision,split2_train_metric__precision,mean_train_metric__precision,std_train_metric__precision,split0_test_metric__custom,split1_test_metric__custom,split2_test_metric__custom,mean_test_metric__custom,std_test_metric__custom,rank_test_metric__custom,split0_train_metric__custom,split1_train_metric__custom,split2_train_metric__custom,mean_train_metric__custom,std_train_metric__custom,id,pipeline__id,pipeline__hash,pipeline__type,dataset__id,dataset__hash
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.009442745360632799,0.0003344217936197917,1.3913425922403014e-05,0.0020634333292643228,9.421734604015378e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.009442745360632799}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,11,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,11,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,73412a7b-5ae4-4086-bce8-0384dcf02cb3,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.009442745360632799,0.0003863970438639323,3.6525193728732614e-05,0.002109686533610026,8.789087484704668e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.009442745360632799}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,11,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,0.14285714285714285,0.01282051282051282,0.11538461538461539,0.09035409035409037,0.05595996590002924,11,0.038461538461538464,0.12686567164179105,0.03793103448275862,0.06775274819536271,0.04179971010589546,bc1a400e-186a-41f3-acb5-ac5ce4c50379,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.1621771704781827,0.00032202402750651043,3.0241485580508628e-06,0.002001206080118815,5.078496069136452e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.1621771704781827}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,97a8208f-a069-4c60-8d99-82faae62e518,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.1621771704781827,0.0003401438395182292,1.6209346496559095e-06,0.002036571502685547,6.800768947555384e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.1621771704781827}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,0.6666666666666666,0.25,0.2222222222222222,0.3796296296296296,0.20328239259351988,1,0.23529411764705882,0.3333333333333333,0.36363636363636365,0.3107546048722519,0.0547739735067927,6152e56e-8502-4489-a2de-f2670f3aca03,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.3975509701522514,0.00032981236775716144,1.152712668251951e-05,0.0020072460174560547,1.4962863331810387e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.3975509701522514}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,9,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,9,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,8504dc24-2622-42da-860b-b2a193b3533f,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.3975509701522514,0.0003211498260498047,2.867638040013109e-06,0.002005418141682943,4.797739087549903e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.3975509701522514}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,9,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,0.6666666666666666,0.0,0.125,0.2638888888888889,0.28934259244443966,9,0.1,0.2727272727272727,0.4,0.25757575757575757,0.1229421986369745,58c07c79-b413-4d7a-ac75-53c4c6aa7921,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5547393847647705,0.00031987826029459637,1.949921313347069e-06,0.001996199289957682,5.8564110578656824e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.5547393847647705}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,8c96d49e-3d2d-4f59-8932-00375b16c7ee,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5547393847647705,0.0003333091735839844,1.0038148924673596e-05,0.0020351409912109375,8.934644133882046e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.5547393847647705}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,e51a96b8-b848-45d8-a98d-ad3bdf87c611,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5669644124417274,0.00032178560892740887,2.2562455442076346e-06,0.0020411014556884766,5.493604181018681e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.5669644124417274}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,55556be8-71a8-4284-b91e-92c85f9ff0d8,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.5669644124417274,0.00033020973205566406,1.21117263952526e-05,0.001974344253540039,1.9104257240179775e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.5669644124417274}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,0.6666666666666666,0.0,0.16666666666666666,0.27777777777777773,0.28327886186626583,5,0.14285714285714285,0.3333333333333333,0.5,0.3253968253968254,0.145910923101986,2b5fcc13-4f92-4188-9093-feaf97c1df8a,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.7332875774562987,0.0003372033437093099,1.1394867289659123e-05,0.0020531018575032554,4.6782858404144804e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.7332875774562987}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,3,0.0,0.5,1.0,0.5,0.408248290463863,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,3,0.0,0.5,1.0,0.5,0.408248290463863,2440a4a8-156c-4f46-863b-dd6164cd6252,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.7332875774562987,0.00035063425699869793,2.093955274953496e-05,0.0020340283711751304,3.254236508380593e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.7332875774562987}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,3,0.0,0.5,1.0,0.5,0.408248290463863,1.0,0.0,0.0,0.3333333333333333,0.4714045207910317,3,0.0,0.5,1.0,0.5,0.408248290463863,a7a843fd-fb0b-4815-b7eb-e01ace9efe8f,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.8692101592014967,0.00032560030619303387,4.705706069656201e-06,0.002089818318684896,0.00010197448747513655,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.8692101592014967}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,579352fc-f935-49ab-ab81-73f7ecc15265,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.8692101592014967,0.0003287792205810547,9.9471324727471e-06,0.001998345057169596,4.383113741298386e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.8692101592014967}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,9b9a8d8b-c150-471b-b778-d884cdbe3ea7,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.9041226203629578,0.000356594721476237,2.8478353824691006e-05,0.002128124237060547,0.00013883142044372445,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 0.9041226203629578}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,72a4e500-9b90-46ef-921d-852bc106d5a4,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",0.9041226203629578,0.0003363291422526042,2.0097364769620563e-05,0.0020813941955566406,4.983689741250097e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 0.9041226203629578}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0d783201-7c3b-46c7-99c2-0267e67e313c,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",1.0,0.0003275871276855469,4.348552710312033e-06,0.002008517583211263,3.7659738879179954e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}, 'estimate__apply_threshold__threshold': 1.0}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,aa3c88e5-64c5-45d9-907d-ef24e329ad8b,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
None,"[('pass_custom', FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)), ('select_rows', FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)), ('process_parallel', FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])), ('select_columns', SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))), ('reduce_dimensions', PCA(random_state=42)), ('estimate', Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))]))]",False,"FunctionTransformer(func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True)","FunctionTransformer(func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,
                    skip=True)","FeatureUnion(transformer_list=[('pipeline_categoric',
                                Pipeline(steps=[('select_columns',
                                                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                                                     kw_args={'indices': [2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          13,
                                                                                          14,
                                                                                          44,
                                                                                          45,
                                                                                          46,
                                                                                          47,
                                                                                          48,
                                                                                          49,
                                                                                          50,
                                                                                          51,
                                                                                          52,
                                                                                          403,
                                                                                          404,
                                                                                          405,
                                                                                          406,
                                                                                          407,
                                                                                          408,
                                                                                          409,
                                                                                          410,
                                                                                          411,
                                                                                          412, ...]})),
                                                ('encode_onehot',
                                                 OneHotEnco...
                                                 RobustScaler(copy=False,
                                                              quantile_range=(0,
                                                                              100))),
                                                ('add_polynomial',
                                                 PolynomialFeatures(degree=1,
                                                                    include_bias=False)),
                                                ('compose_columns',
                                                 ColumnTransformer(remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))])","SelectFromModel(estimator=CustomSelector(skip=True, verbose=False))",PCA(random_state=42),"Pipeline(steps=[('predict_proba',
                 PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                                 num_leaves=2,
                                                                 objective='binary',
                                                                 random_state=42,
                                                                 silent=False))),
                ('apply_threshold',
                 ThresholdClassifier(params={'classes': [array([0, 1])],
                                             'pos_labels': [1],
                                             'pos_labels_ind': [1]},
                                     threshold=1.0))])",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38b10>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b38f10>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])), ('pipeline_numeric', Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]))]",None,False,"Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                                     kw_args={'indices': [2, 3, 4, 5, 6, 7, 8,
                                                          9, 10, 13, 14, 44, 45,
                                                          46, 47, 48, 49, 50,
                                                          51, 52, 403, 404, 405,
                                                          406, 407, 408, 409,
                                                          410, 411, 412, ...]})),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', handle_unknown='ignore',
                               sparse=False))])","Pipeline(steps=[('select_columns',
                 FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                                     kw_args={'indices': [0, 1, 11, 12, 15, 16,
                                                          17, 18, 19, 20, 21,
                                                          22, 23, 24, 25, 26,
                                                          27, 28, 29, 30, 31,
                                                          32, 33, 34, 35, 36,
                                                          37, 38, 39, 40, ...]})),
                ('impute',
                 FeatureUnion(transformer_list=[('indicators',
                                                 MissingIndicator(error_on_new...
                 RobustScaler(copy=False, quantile_range=(0, 100))),
                ('add_polynomial',
                 PolynomialFeatures(degree=1, include_bias=False)),
                ('compose_columns',
                 ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))])",None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})), ('encode_onehot', OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,
                    kw_args={'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44,
                                         45, 46, 47, 48, 49, 50, 51, 52, 403,
                                         404, 405, 406, 407, 408, 409, 410, 411,
                                         412, ...]})","OneHotEncoder(categories='auto', handle_unknown='ignore', sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b18bd0>>,None,None,"{'indices': [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 44, 45, 46, 47, 48, 49, 50, 51, 52, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})), ('impute', FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])), ('transform_normal', PowerTransformer(copy=False, skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(skip=True)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100))), ('add_polynomial', PolynomialFeatures(degree=1, include_bias=False)), ('compose_columns', ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]))]",False,"FunctionTransformer(func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,
                    kw_args={'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20,
                                         21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                         31, 32, 33, 34, 35, 36, 37, 38, 39, 40, ...]})","FeatureUnion(transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False)),
                               ('gaps',
                                SimpleImputer(fill_value=0,
                                              strategy='constant'))])","PowerTransformer(copy=False, skip=True, standardize=False)",FunctionTransformer(skip=True),"RobustScaler(copy=False, quantile_range=(0, 100))","PolynomialFeatures(degree=1, include_bias=False)","ColumnTransformer(remainder='passthrough', sparse_threshold=0,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)])",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b20c90>>,None,None,"{'indices': [0, 1, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False)), ('gaps', SimpleImputer(fill_value=0, strategy='constant'))]",None,False,MissingIndicator(error_on_new=False),"SimpleImputer(fill_value=0, strategy='constant')",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,1,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fc0a3b17690>>)]",False,KBinsDiscretizer(encode='onehot-dense'),onehot-dense,5,quantile,classifier,True,False,"CustomSelector(skip=True, verbose=False)",None,1,False,None,True,auto,None,42,True,auto,0.0,False,None,"[('predict_proba', PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))), ('apply_threshold', ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0))]",False,"PredictionTransformer(classifier=LGBMClassifier(min_child_samples=1,
                                                num_leaves=2,
                                                objective='binary',
                                                random_state=42, silent=False))","ThresholdClassifier(params={'classes': [array([0, 1])], 'pos_labels': [1],
                            'pos_labels_ind': [1]},
                    threshold=1.0)",gbdt,None,1.0,split,0.1,-1,1,0.001,0.0,100,-1,2,binary,42,0.0,0.0,False,1.0,200000,0,"LGBMClassifier(min_child_samples=1, num_leaves=2, objective='binary',
               random_state=42, silent=False)","{'pos_labels_ind': [1], 'pos_labels': [1], 'classes': [array([0, 1])]}",1.0,0.000322421391805013,1.8907192950837323e-06,0.0019933382670084634,1.7846214162720295e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}, 'estimate__apply_threshold__threshold': 1.0}",0.8475244402396721,0.7662337662337663,0.8632525697503671,0.8256702587412685,0.04251561278457657,1,0.788851785255587,0.8484437282673225,0.7689387402933563,0.802078084605422,0.0337783167535399,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13,0.0,0.0,0.0,0.0,0.0,7b9d2fb0-1ef0-4c77-8755-a310eecd3498,pipeline__lgbm,-1974730997319368812,classifier,dataset__train,-2181844854438638947
