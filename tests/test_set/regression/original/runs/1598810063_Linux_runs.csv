memory,steps,verbose,pass_custom,select_rows,process_parallel,select_columns,reduce_dimension,estimate,pass_custom__accept_sparse,pass_custom__check_inverse,pass_custom__func,pass_custom__inv_kw_args,pass_custom__inverse_func,pass_custom__kw_args,pass_custom__skip,pass_custom__validate,select_rows__accept_sparse,select_rows__check_inverse,select_rows__func,select_rows__inv_kw_args,select_rows__inverse_func,select_rows__kw_args,select_rows__skip,select_rows__validate,process_parallel__n_jobs,process_parallel__transformer_list,process_parallel__transformer_weights,process_parallel__verbose,process_parallel__pipeline_categoric,process_parallel__pipeline_numeric,process_parallel__pipeline_categoric__memory,process_parallel__pipeline_categoric__steps,process_parallel__pipeline_categoric__verbose,process_parallel__pipeline_categoric__select_columns,process_parallel__pipeline_categoric__encode_onehot,process_parallel__pipeline_categoric__select_columns__accept_sparse,process_parallel__pipeline_categoric__select_columns__check_inverse,process_parallel__pipeline_categoric__select_columns__func,process_parallel__pipeline_categoric__select_columns__inv_kw_args,process_parallel__pipeline_categoric__select_columns__inverse_func,process_parallel__pipeline_categoric__select_columns__kw_args,process_parallel__pipeline_categoric__select_columns__skip,process_parallel__pipeline_categoric__select_columns__validate,process_parallel__pipeline_categoric__encode_onehot__categories,process_parallel__pipeline_categoric__encode_onehot__drop,process_parallel__pipeline_categoric__encode_onehot__dtype,process_parallel__pipeline_categoric__encode_onehot__handle_unknown,process_parallel__pipeline_categoric__encode_onehot__skip,process_parallel__pipeline_categoric__encode_onehot__sparse,process_parallel__pipeline_numeric__memory,process_parallel__pipeline_numeric__steps,process_parallel__pipeline_numeric__verbose,process_parallel__pipeline_numeric__select_columns,process_parallel__pipeline_numeric__impute,process_parallel__pipeline_numeric__transform_normal,process_parallel__pipeline_numeric__scale_row_wise,process_parallel__pipeline_numeric__scale_column_wise,process_parallel__pipeline_numeric__add_polynomial,process_parallel__pipeline_numeric__compose_columns,process_parallel__pipeline_numeric__select_columns__accept_sparse,process_parallel__pipeline_numeric__select_columns__check_inverse,process_parallel__pipeline_numeric__select_columns__func,process_parallel__pipeline_numeric__select_columns__inv_kw_args,process_parallel__pipeline_numeric__select_columns__inverse_func,process_parallel__pipeline_numeric__select_columns__kw_args,process_parallel__pipeline_numeric__select_columns__skip,process_parallel__pipeline_numeric__select_columns__validate,process_parallel__pipeline_numeric__impute__n_jobs,process_parallel__pipeline_numeric__impute__transformer_list,process_parallel__pipeline_numeric__impute__transformer_weights,process_parallel__pipeline_numeric__impute__verbose,process_parallel__pipeline_numeric__impute__indicators,process_parallel__pipeline_numeric__impute__gaps,process_parallel__pipeline_numeric__impute__indicators__error_on_new,process_parallel__pipeline_numeric__impute__indicators__features,process_parallel__pipeline_numeric__impute__indicators__missing_values,process_parallel__pipeline_numeric__impute__indicators__sparse,process_parallel__pipeline_numeric__impute__gaps__add_indicator,process_parallel__pipeline_numeric__impute__gaps__copy,process_parallel__pipeline_numeric__impute__gaps__fill_value,process_parallel__pipeline_numeric__impute__gaps__missing_values,process_parallel__pipeline_numeric__impute__gaps__strategy,process_parallel__pipeline_numeric__impute__gaps__verbose,process_parallel__pipeline_numeric__transform_normal__copy,process_parallel__pipeline_numeric__transform_normal__method,process_parallel__pipeline_numeric__transform_normal__skip,process_parallel__pipeline_numeric__transform_normal__standardize,process_parallel__pipeline_numeric__scale_row_wise__accept_sparse,process_parallel__pipeline_numeric__scale_row_wise__check_inverse,process_parallel__pipeline_numeric__scale_row_wise__func,process_parallel__pipeline_numeric__scale_row_wise__inv_kw_args,process_parallel__pipeline_numeric__scale_row_wise__inverse_func,process_parallel__pipeline_numeric__scale_row_wise__kw_args,process_parallel__pipeline_numeric__scale_row_wise__skip,process_parallel__pipeline_numeric__scale_row_wise__validate,process_parallel__pipeline_numeric__scale_column_wise__copy,process_parallel__pipeline_numeric__scale_column_wise__quantile_range,process_parallel__pipeline_numeric__scale_column_wise__with_centering,process_parallel__pipeline_numeric__scale_column_wise__with_scaling,process_parallel__pipeline_numeric__add_polynomial__degree,process_parallel__pipeline_numeric__add_polynomial__include_bias,process_parallel__pipeline_numeric__add_polynomial__interaction_only,process_parallel__pipeline_numeric__add_polynomial__order,process_parallel__pipeline_numeric__compose_columns__n_jobs,process_parallel__pipeline_numeric__compose_columns__remainder,process_parallel__pipeline_numeric__compose_columns__sparse_threshold,process_parallel__pipeline_numeric__compose_columns__transformer_weights,process_parallel__pipeline_numeric__compose_columns__transformers,process_parallel__pipeline_numeric__compose_columns__verbose,process_parallel__pipeline_numeric__compose_columns__discretize,process_parallel__pipeline_numeric__compose_columns__discretize__encode,process_parallel__pipeline_numeric__compose_columns__discretize__n_bins,process_parallel__pipeline_numeric__compose_columns__discretize__strategy,select_columns__estimator__estimator_type,select_columns__estimator__skip,select_columns__estimator__verbose,select_columns__estimator,select_columns__max_features,select_columns__norm_order,select_columns__prefit,select_columns__threshold,reduce_dimension__skip,estimate__check_inverse,estimate__func,estimate__inverse_func,estimate__regressor__boosting_type,estimate__regressor__class_weight,estimate__regressor__colsample_bytree,estimate__regressor__importance_type,estimate__regressor__learning_rate,estimate__regressor__max_depth,estimate__regressor__min_child_samples,estimate__regressor__min_child_weight,estimate__regressor__min_split_gain,estimate__regressor__n_estimators,estimate__regressor__n_jobs,estimate__regressor__num_leaves,estimate__regressor__objective,estimate__regressor__random_state,estimate__regressor__reg_alpha,estimate__regressor__reg_lambda,estimate__regressor__silent,estimate__regressor__subsample,estimate__regressor__subsample_for_bin,estimate__regressor__subsample_freq,estimate__regressor__min_data_in_leaf,estimate__regressor,estimate__transformer__accept_sparse,estimate__transformer__check_inverse,estimate__transformer__func,estimate__transformer__inv_kw_args,estimate__transformer__inverse_func,estimate__transformer__kw_args,estimate__transformer__validate,estimate__transformer,mean_fit_time,std_fit_time,mean_score_time,std_score_time,params,split0_test_metric__mae,split1_test_metric__mae,split2_test_metric__mae,mean_test_metric__mae,std_test_metric__mae,rank_test_metric__mae,split0_train_metric__mae,split1_train_metric__mae,split2_train_metric__mae,mean_train_metric__mae,std_train_metric__mae,split0_test_metric__r2,split1_test_metric__r2,split2_test_metric__r2,mean_test_metric__r2,std_test_metric__r2,rank_test_metric__r2,split0_train_metric__r2,split1_train_metric__r2,split2_train_metric__r2,mean_train_metric__r2,std_train_metric__r2,id,pipeline__id,pipeline__hash,pipeline__type,dataset__id,dataset__hash
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [0,
                                                                                          1,
                                                                                          2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          11,
                                                                                          12,...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='regressor', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=42,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False)))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [0,
                                                                                          1,
                                                                                          2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          11,
                                                                                          12,...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='regressor', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=42,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False))",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,None,None,"{'metric__custom': {'param_a': 1, 'param_b': 'c'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 2, 3, 4, 5, 6,
                                                          7, 8, 9, 10, 11, 12,
                                                          13, 14, 15, 16, 17,
                                                          18, 19, 20, 21, 22,
                                                          23, 24, 25, 26, 27,
                                                          28, 29, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [116, 117, 118, 119,
                                                          120, 121, 122, 123,
                                                          124, 125, 126, 127,
                                                          128, 129]},
                                     skip=False, validate=False)),
                ('impute...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 2, 3, 4, 5, 6,
                                                          7, 8, 9, 10, 11, 12,
                                                          13, 14, 15, 16, 17,
                                                          18, 19, 20, 21, 22,
                                                          23, 24, 25, 26, 27,
                                                          28, 29, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [116, 117, 118, 119,
                                                          120, 121, 122, 123,
                                                          124, 125, 126, 127,
                                                          128, 129]},
                                     skip=False, validate=False)),
                ('impute...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                         12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                                         22, 23, 24, 25, 26, 27, 28, 29, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                         12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                                         22, 23, 24, 25, 26, 27, 28, 29, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,None,None,"{'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [116, 117, 118, 119, 120, 121, 122, 123,
                                         124, 125, 126, 127, 128, 129]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [116, 117, 118, 119, 120, 121, 122, 123,
                                         124, 125, 126, 127, 128, 129]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,None,None,"{'indices': [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,3,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,regressor,True,False,"CustomSelector(estimator_type='regressor', skip=True, verbose=False)",None,1,False,None,True,True,None,None,gbdt,None,1.0,split,0.1,-1,20,0.001,0.0,250,-1,2,None,42,0.0,0.0,False,1.0,200000,0,1,"LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_data_in_leaf=1,
              min_split_gain=0.0, n_estimators=250, n_jobs=-1, num_leaves=2,
              objective=None, random_state=42, reg_alpha=0.0, reg_lambda=0.0,
              silent=False, subsample=1.0, subsample_for_bin=200000,
              subsample_freq=0)",False,True,<ufunc 'log'>,None,<ufunc 'exp'>,None,False,"FunctionTransformer(accept_sparse=False, check_inverse=True, func=<ufunc 'log'>,
                    inv_kw_args=None, inverse_func=<ufunc 'exp'>, kw_args=None,
                    validate=False)",0.00013343493143717447,3.4449261751657805e-05,0.0005145867665608724,2.5548515863807617e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 1, 'param_b': 'c'}}}",-1462.3251196324838,-1716.5517896556848,-1433.888835268282,-1537.588581518817,127.07747759297703,1,-1575.2203124619834,-1448.137423150987,-1589.1662633485566,-1537.5079996538425,63.45049169692449,0.22332464407792796,0.21677487267429263,0.2715754311265335,0.23722498262625136,0.024436173465961903,1,0.24615026909054105,0.24830066079681057,0.22322297801576207,0.23922463596770457,0.011348886554219654,7347a248-f86c-4a77-9c05-ffef9e45ac3d,pipeline__lgbm,4359748936690777956,regressor,dataset__train,-1187869820282807802
None,"[('pass_custom', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True, validate=False)), ('select_rows', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('process_parallel', FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [0,
                                                                                          1,
                                                                                          2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          11,
                                                                                          12,...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)), ('select_columns', SelectFromModel(estimator=CustomSelector(estimator_type='regressor', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)), ('reduce_dimension', CustomReducer(skip=True)), ('estimate', TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=42,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False)))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'metric__custom': {'param_a': 2, 'param_b': 'd'}},
                    skip=True, validate=False)","FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('pipeline_categoric',
                                Pipeline(memory=None,
                                         steps=[('select_columns',
                                                 FunctionTransformer(accept_sparse=False,
                                                                     check_inverse=True,
                                                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                                                     inv_kw_args=None,
                                                                     inverse_func=None,
                                                                     kw_args={'indices': [0,
                                                                                          1,
                                                                                          2,
                                                                                          3,
                                                                                          4,
                                                                                          5,
                                                                                          6,
                                                                                          7,
                                                                                          8,
                                                                                          9,
                                                                                          10,
                                                                                          11,
                                                                                          12,...
                                                 ColumnTransformer(n_jobs=None,
                                                                   remainder='passthrough',
                                                                   sparse_threshold=0,
                                                                   transformer_weights=None,
                                                                   transformers=[('discretize',
                                                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                                                   n_bins=5,
                                                                                                   strategy='quantile'),
                                                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                                                   verbose=False))],
                                         verbose=False))],
             transformer_weights=None, verbose=False)","SelectFromModel(estimator=CustomSelector(estimator_type='regressor', skip=True,
                                         verbose=False),
                max_features=None, norm_order=1, prefit=False, threshold=None)",CustomReducer(skip=True),"TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=LGBMRegressor(boosting_type='gbdt',
                                                   class_weight=None,
                                                   colsample_bytree=1.0,
                                                   importance_type='split',
                                                   learning_rate=0.1,
                                                   max_depth=-1,
                                                   min_child_samples=20,
                                                   min_child_weight=0.001,
                                                   min_data_in_leaf=1,
                                                   min_split_gain=0.0,
                                                   n_estimators=250, n_jobs=-1,
                                                   num_leaves=2, objective=None,
                                                   random_state=42,
                                                   reg_alpha=0.0,
                                                   reg_lambda=0.0, silent=False,
                                                   subsample=1.0,
                                                   subsample_for_bin=200000,
                                                   subsample_freq=0),
                           transformer=FunctionTransformer(accept_sparse=False,
                                                           check_inverse=True,
                                                           func=<ufunc 'log'>,
                                                           inv_kw_args=None,
                                                           inverse_func=<ufunc 'exp'>,
                                                           kw_args=None,
                                                           validate=False))",False,True,<bound method Steps.scorer_kwargs of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549129210>>,None,None,"{'metric__custom': {'param_a': 2, 'param_b': 'd'}}",True,False,False,True,<bound method Steps.subrows of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54908aa50>>,None,None,None,True,False,None,"[('pipeline_categoric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 2, 3, 4, 5, 6,
                                                          7, 8, 9, 10, 11, 12,
                                                          13, 14, 15, 16, 17,
                                                          18, 19, 20, 21, 22,
                                                          23, 24, 25, 26, 27,
                                                          28, 29, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)), ('pipeline_numeric', Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [116, 117, 118, 119,
                                                          120, 121, 122, 123,
                                                          124, 125, 126, 127,
                                                          128, 129]},
                                     skip=False, validate=False)),
                ('impute...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                   verbose=False))],
         verbose=False))]",None,False,"Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [0, 1, 2, 3, 4, 5, 6,
                                                          7, 8, 9, 10, 11, 12,
                                                          13, 14, 15, 16, 17,
                                                          18, 19, 20, 21, 22,
                                                          23, 24, 25, 26, 27,
                                                          28, 29, ...]},
                                     skip=False, validate=False)),
                ('encode_onehot',
                 OneHotEncoder(categories='auto', drop=None,
                               dtype=<class 'numpy.float64'>,
                               handle_unknown='ignore', skip=False,
                               sparse=False))],
         verbose=False)","Pipeline(memory=None,
         steps=[('select_columns',
                 FunctionTransformer(accept_sparse=False, check_inverse=True,
                                     func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                                     inv_kw_args=None, inverse_func=None,
                                     kw_args={'indices': [116, 117, 118, 119,
                                                          120, 121, 122, 123,
                                                          124, 125, 126, 127,
                                                          128, 129]},
                                     skip=False, validate=False)),
                ('impute...
                                    interaction_only=False, order='C')),
                ('compose_columns',
                 ColumnTransformer(n_jobs=None, remainder='passthrough',
                                   sparse_threshold=0, transformer_weights=None,
                                   transformers=[('discretize',
                                                  KBinsDiscretizer(encode='onehot-dense',
                                                                   n_bins=5,
                                                                   strategy='quantile'),
                                                  <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                                   verbose=False))],
         verbose=False)",None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                         12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                                         22, 23, 24, 25, 26, 27, 28, 29, ...]},
                    skip=False, validate=False)), ('encode_onehot', OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                         12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                                         22, 23, 24, 25, 26, 27, 28, 29, ...]},
                    skip=False, validate=False)","OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
              handle_unknown='ignore', skip=False, sparse=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54919fe10>>,None,None,"{'indices': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115]}",False,False,auto,None,<class 'numpy.float64'>,ignore,False,False,None,"[('select_columns', FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [116, 117, 118, 119, 120, 121, 122, 123,
                                         124, 125, 126, 127, 128, 129]},
                    skip=False, validate=False)), ('impute', FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)), ('transform_normal', PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)), ('scale_row_wise', FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)), ('scale_column_wise', RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)), ('add_polynomial', PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')), ('compose_columns', ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                  verbose=False))]",False,"FunctionTransformer(accept_sparse=False, check_inverse=True,
                    func=<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,
                    inv_kw_args=None, inverse_func=None,
                    kw_args={'indices': [116, 117, 118, 119, 120, 121, 122, 123,
                                         124, 125, 126, 127, 128, 129]},
                    skip=False, validate=False)","FeatureUnion(n_jobs=None,
             transformer_list=[('indicators',
                                MissingIndicator(error_on_new=False,
                                                 features='missing-only',
                                                 missing_values=nan,
                                                 sparse='auto')),
                               ('gaps',
                                SimpleImputer(add_indicator=False, copy=True,
                                              fill_value=0, missing_values=nan,
                                              strategy='constant',
                                              verbose=0))],
             transformer_weights=None, verbose=False)","PowerTransformer(copy=False, method='yeo-johnson', skip=True, standardize=False)","FunctionTransformer(accept_sparse=False, check_inverse=True, func=None,
                    inv_kw_args=None, inverse_func=None, kw_args=None,
                    skip=True, validate=False)","RobustScaler(copy=False, quantile_range=(0, 100), with_centering=True,
             with_scaling=True)","PolynomialFeatures(degree=3, include_bias=False, interaction_only=False,
                   order='C')","ColumnTransformer(n_jobs=None, remainder='passthrough', sparse_threshold=0,
                  transformer_weights=None,
                  transformers=[('discretize',
                                 KBinsDiscretizer(encode='onehot-dense',
                                                  n_bins=5,
                                                  strategy='quantile'),
                                 <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)],
                  verbose=False)",False,True,<bound method Steps.subcolumns of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd54911ac50>>,None,None,"{'indices': [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]}",False,False,None,"[('indicators', MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')), ('gaps', SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0))]",None,False,"MissingIndicator(error_on_new=False, features='missing-only',
                 missing_values=nan, sparse='auto')","SimpleImputer(add_indicator=False, copy=True, fill_value=0, missing_values=nan,
              strategy='constant', verbose=0)",False,missing-only,,auto,False,True,0,,constant,0,False,yeo-johnson,True,False,False,True,None,None,None,None,True,False,False,"(0, 100)",True,True,3,False,False,C,None,passthrough,0,None,"[('discretize', KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile'), <bound method Steps.bining_mask of <mlshell.blocks.pipeline.steps.Steps object at 0x7fd549127390>>)]",False,"KBinsDiscretizer(encode='onehot-dense', n_bins=5, strategy='quantile')",onehot-dense,5,quantile,regressor,True,False,"CustomSelector(estimator_type='regressor', skip=True, verbose=False)",None,1,False,None,True,True,None,None,gbdt,None,1.0,split,0.1,-1,20,0.001,0.0,250,-1,2,None,42,0.0,0.0,False,1.0,200000,0,1,"LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_data_in_leaf=1,
              min_split_gain=0.0, n_estimators=250, n_jobs=-1, num_leaves=2,
              objective=None, random_state=42, reg_alpha=0.0, reg_lambda=0.0,
              silent=False, subsample=1.0, subsample_for_bin=200000,
              subsample_freq=0)",False,True,<ufunc 'log'>,None,<ufunc 'exp'>,None,False,"FunctionTransformer(accept_sparse=False, check_inverse=True, func=<ufunc 'log'>,
                    inv_kw_args=None, inverse_func=<ufunc 'exp'>, kw_args=None,
                    validate=False)",0.00010863939921061198,2.9736021254650284e-07,0.0005180835723876953,4.407972032012158e-05,"{'pass_custom__kw_args': {'metric__custom': {'param_a': 2, 'param_b': 'd'}}}",-1462.3251196324838,-1716.5517896556848,-1433.888835268282,-1537.588581518817,127.07747759297703,1,-1575.2203124619834,-1448.137423150987,-1589.1662633485566,-1537.5079996538425,63.45049169692449,0.22332464407792796,0.21677487267429263,0.2715754311265335,0.23722498262625136,0.024436173465961903,1,0.24615026909054105,0.24830066079681057,0.22322297801576207,0.23922463596770457,0.011348886554219654,e667b739-e136-4bda-a210-1294eb30d110,pipeline__lgbm,4359748936690777956,regressor,dataset__train,-1187869820282807802
