<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
====================================================================================================
● LOAD DATA
====================================================================================================
Data loaded from:
    data/train_transaction.csv
    data/train_identity.csv
====================================================================================================
● PREPROCESS DATA
====================================================================================================
● INITITALIZE WORKFLOW
====================================================================================================
Used params:
    {
    'estimator_type': 'classifier',
    'main_estimator': LGBMClassifier(boosting_type = 'gbdt', class_weight = None, colsample_bytree = 0.9,
        importance_type = 'split', learning_rate = 0.03, max_depth = 13,
        min_child_samples = 1, min_child_weight = 0.001, min_split_gain = 0.0,
        n_estimators = 500, n_jobs = -1, num_leaves = 32, objective = 'binary',
        random_state = None, reg_alpha = 0.3, reg_lambda = 0.3, silent = True,
        subsample = 0.9, subsample_for_bin = 200000, subsample_freq = 3),
    'cv_splitter': TimeSeriesSplit(max_train_size = None, n_splits = 3),
    'metrics': {
        'score': ( < function roc_auc_score at 0x7f40fafecc20 > , {
            'greater_is_better': True,
            'needs_proba': True
        }),
        'precision': ( < function precision_score at 0x7f40faffbc20 > , {
            'greater_is_better': True,
            'zero_division': 0
        }),
        'custom': ( < function custom_score_metric at 0x7f4108e0ddd0 > , {
            'greater_is_better': True
        }),
        'confusion matrix': ( < function confusion_matrix at 0x7f40faffb4d0 > , {
            'labels': [1, 0]
        }, False),
        'classification report': ( < function classification_report at 0x7f40faffbdd0 > , {
            'output_dict': True,
            'zero_division': 0
        }, False)
    },
    'split_train_size': 0.7,
    'hp_grid': {
        'estimate__classifier__num_leaves': [2, 4, 8, 16, 32]
    },
    'gs_flag': True,
    'estimator_fit_params': {},
    'del_duplicates': False,
    'pipeline': None,
    'debug_pipeline': False,
    'use_unifier_cache': False,
    'update_unifier_cache': False,
    'use_pipeline_cache': False,
    'update_pipeline_cache': False,
    'gs_verbose': 1000,
    'n_jobs': 1,
    'model_dump': False,
    'runs': None,
    'pos_label': 1,
    'th_strategy': 0,
    'th_points_number': 10,
    'th_plot_flag': True,
    'get_data': {
        'train': {
            'args': ['data/train_transaction.csv', 'data/train_identity.csv'],
            'kw_args': {
                'rows_limit': 10000,
                'random_skip': False,
                'index_col': 'TransactionID'
            }
        },
        'test': {
            'args': ['data/test_transaction.csv', 'data/test_identity.csv'],
            'kw_args': {
                'rows_limit': 10000,
                'random_skip': False,
                'index_col': 'TransactionID'
            }
        }
    },
    'rows_limit': None,
    'random_skip': False
}
====================================================================================================
● UNIFY DATA
====================================================================================================
Warning: gaps found:2232677 0.515629792147806%,
    see debug.log for details.
====================================================================================================
● CREATE PIPELINE
====================================================================================================
Estimator step:
    Pipeline(memory=None,
         steps=[('classifier',
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=0.9, importance_type='split',
                                learning_rate=0.03, max_depth=13,
                                min_child_samples=1, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=500, n_jobs=-1,
                                num_leaves=32, objective='binary',
                                random_state=None, reg_alpha=0.3,
                                reg_lambda=0.3, silent=True, subsample=0.9,
                                subsample_for_bin=200000, subsample_freq=3))],
         verbose=False)
====================================================================================================
● SPLIT DATA
====================================================================================================
● OPTIMIZE PIPELINE
====================================================================================================
● ● GRID SEARCH HYPERPARAMETERS
====================================================================================================
hp grid:
    {
    'estimate__classifier__num_leaves': [2, 4, 8, 16, 32]
}
====================================================================================================
+----+------------------------------------------+-------------------+--------------------+-----------------------+------------------------+--------------------+---------------------+
|    |   param_estimate__classifier__num_leaves |   mean_test_score |   mean_train_score |   mean_test_precision |   mean_train_precision |   mean_test_custom |   mean_train_custom |
|----+------------------------------------------+-------------------+--------------------+-----------------------+------------------------+--------------------+---------------------|
|  0 |                                        2 |          0.802451 |           0.95316  |              1        |                      1 |           1        |                   1 |
|  1 |                                        4 |          0.828922 |           0.994346 |              0.794643 |                      1 |           0.794643 |                   1 |
|  2 |                                        8 |          0.823652 |           0.999999 |              0.809524 |                      1 |           0.809524 |                   1 |
|  3 |                                       16 |          0.828734 |           1        |              0.619048 |                      1 |           0.619048 |                   1 |
|  4 |                                       32 |          0.812705 |           1        |              0.611111 |                      1 |           0.611111 |                   1 |
+----+------------------------------------------+-------------------+--------------------+-----------------------+------------------------+--------------------+---------------------+
====================================================================================================
GridSearch best index:
    1
====================================================================================================
GridSearch time:
    {'mean_fit_time': 1.8352720260620117, 'mean_score_time': 0.22280646959940592}
====================================================================================================
CV best modifiers:
    {'estimate__classifier__num_leaves': 4}
====================================================================================================
CV best configuration:
    {'estimate__classifier__num_leaves': 4}
====================================================================================================
CV best mean test score:
    0.8289224132440524
====================================================================================================
Errors:
    {}
====================================================================================================
● ● DUMP RUNS
====================================================================================================
Save run(s) results to file:
    /mlshell/Projects/Project_ieee_fraud_detection//results/runs/1585580376_runs.csv
====================================================================================================
Best run id:
    d90f82b1-3ef4-4b8a-9c05-e7c2dee18704
====================================================================================================
● VALIDATE ON HOLDOUT
====================================================================================================
score:
====================================================================================================
Train:
    0.9730265936431384
Test:
    0.8739490514183413
====================================================================================================
precision:
====================================================================================================
Train:
    1.0
Test:
    1.0
====================================================================================================
custom:
====================================================================================================
Train:
    1.0
Test:
    1.0
====================================================================================================
confusion matrix:
====================================================================================================
Train:
    +----+-----+------+
    |    |   1 |    0 |
    |----+-----+------|
    |  1 |  80 |   92 |
    |  0 |   0 | 6828 |
    +----+-----+------+
Test:
    +----+-----+------+
    |    |   1 |    0 |
    |----+-----+------|
    |  1 |  22 |   71 |
    |  0 |   0 | 2907 |
    +----+-----+------+
====================================================================================================
classification report:
====================================================================================================
Train:
    +-----------+-------------+------------+------------+-------------+----------------+
    |           |         0.0 |        1.0 |   accuracy |   macro avg |   weighted avg |
    |-----------+-------------+------------+------------+-------------+----------------|
    | precision |    0.986705 |   1        |   0.986857 |    0.993353 |       0.987032 |
    | recall    |    1        |   0.465116 |   0.986857 |    0.732558 |       0.986857 |
    | f1-score  |    0.993308 |   0.634921 |   0.986857 |    0.814114 |       0.984502 |
    | support   | 6828        | 172        |   0.986857 | 7000        |    7000        |
    +-----------+-------------+------------+------------+-------------+----------------+
Test:
    +-----------+-------------+-----------+------------+-------------+----------------+
    |           |         0.0 |       1.0 |   accuracy |   macro avg |   weighted avg |
    |-----------+-------------+-----------+------------+-------------+----------------|
    | precision |    0.976158 |  1        |   0.976333 |    0.988079 |       0.976898 |
    | recall    |    1        |  0.236559 |   0.976333 |    0.61828  |       0.976333 |
    | f1-score  |    0.987935 |  0.382609 |   0.976333 |    0.685272 |       0.96917  |
    | support   | 2907        | 93        |   0.976333 | 3000        |    3000        |
    +-----------+-------------+-----------+------------+-------------+----------------+
====================================================================================================
● DUMP MODEL
====================================================================================================
Save fitted model to file:
    /mlshell/Projects/Project_ieee_fraud_detection//results/models/c9361065602ac4af39177314ee7bede4_2481023607577188077_dump.model
====================================================================================================
● LOAD MODEL
====================================================================================================
Load fitted model from file:
    /mlshell/Projects/Project_ieee_fraud_detection//results/models/c9361065602ac4af39177314ee7bede4_2481023607577188077_dump.model
====================================================================================================
● LOAD DATA
====================================================================================================
Data loaded from:
    data/test_transaction.csv
    data/test_identity.csv
====================================================================================================
● PREPROCESS DATA
====================================================================================================
Warning: no target column 'isFraud' in df, use 0 values
'isFraud'
====================================================================================================
● PREDICT ON TEST
====================================================================================================
Warning: gaps found:2033556 0.46964341801385684%,
    see debug.log for details.
====================================================================================================
Save predictions for new data to file:    
    /mlshell/Projects/Project_ieee_fraud_detection//results/models/c9361065602ac4af39177314ee7bede4_3392053487631965617_predictions.csv
====================================================================================================
● PREPARE GUI PARAMS
====================================================================================================
Gui dynamic visualisation implements:
    precision plot, TP/FP/FN scatters on base_plot
====================================================================================================
param_estimate__classifier__num_leaves values number=5
====================================================================================================
